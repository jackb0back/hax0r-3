Execute(`{"js":[{"code":"\n\t\tvar Scripts = [];\n\t\tvar PKGs = [];\n\t\tvar TestPKG = {\n\t\t\tPKGname: \"TestPKG\",\n\t\t\tindex: 'dmFyIENPTVBfREFUQSA9IHsianMiOlt7ImNvZGUiOiIKCgpmdW5jdGlvbiBicm93c2VyKCkgewogICAgIHdpbmRvdy5vcGVuKAogICAgICAgICAgImh0dHBzOi8vZzFrazQuY3NiLmFwcCIsCiAgICAgICAgICAiX2JsYW5rIiwKICAgICAgICAgICJ0b29sYmFyPXllcyxzY3JvbGxiYXJzPXllcyxyZXNpemFibGU9eWVzLHRvcD01MDAsbGVmdD01MDAsd2lkdGg9MTAwMCxoZWlnaHQ9NTAwIgogICAgICAgICk7Cn0KCmZ1bmN0aW9uIGZyYW1lKHVybCkKIHsKICAgICAoZnVuY3Rpb24oKSB7CiAgLy8gY29udGFpbmVyCiAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogIGNvbnRhaW5lci5pZCA9ICJsaW5rLXZpZXdlciI7CgogIGNvbnRhaW5lci5zdHlsZS5hbGwgPSAidW5zZXQiOwoKICBjb250YWluZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNGRkYiOwogIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICI0MDBweCI7CiAgY29udGFpbmVyLnN0eWxlLmJvcmRlciA9ICJzb2xpZCAxcHggI0FBQSI7CiAgY29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9ICIycHgiOwogIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CiAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICIxMDBweCI7CiAgY29udGFpbmVyLnN0eWxlLmxlZnQgPSAiMTAwcHgiOwogIGNvbnRhaW5lci5zdHlsZS56SW5kZXggPSAiOTk5OTk5OTk5OTk5OTk5OTk5OSI7CgogIC8vIGlGcmFtZQogIHZhciBpRnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTsKICBpRnJhbWUuaWQgPSAibGluay12aWV3ZXItaWZyYW1lIjsKCiAgaUZyYW1lLnN0eWxlLmFsbCA9ICJ1bnNldCI7CgogIGlGcmFtZS5zdHlsZS5tYXJnaW4gPSAiMHB4IjsKICBpRnJhbWUuc3R5bGUud2lkdGggPSBjb250YWluZXIuc3R5bGUud2lkdGg7CiAgaUZyYW1lLmhlaWdodCA9IGlGcmFtZS5zdHlsZS5oZWlnaHQgPSAiMjAwcHgiOwogIGlGcmFtZS5zdHlsZS5ib3JkZXIgPSAibm9uZSI7CiAgaUZyYW1lLnNyYyA9ICJkYXRhOnRleHQvaHRtbCwgPGgxIHN0eWxlPSdtYXJnaW46IDQwcHggMHB4IDIwcHggMHB4OyB0ZXh0LWFsaWduOiBjZW50ZXI7IGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOyc+RW50ZXIgYSBsaW5rIHRvIGdldCBzdGFydGVkITwvaDE+IjsKCiAgaUZyYW1lLnN0eWxlLnJlc2l6ZSA9ICJib3RoIjsKICBpRnJhbWUuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKCiAgLy8gY29udGVudCBob2xkZXIKICB2YXIgY29udGVudEhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogIGNvbnRlbnRIb2xkZXIuaWQgPSAibGluay12aWV3ZXItY29udGVudC1ob2xkZXIiOwoKICBjb250ZW50SG9sZGVyLnN0eWxlLmFsbCA9ICJ1bnNldCI7CgogIGNvbnRlbnRIb2xkZXIuc3R5bGUud2lkdGggPSAiNDAwcHgiOwogIGNvbnRlbnRIb2xkZXIuc3R5bGUuaGVpZ2h0ID0gaUZyYW1lLmhlaWdodDsKICBjb250ZW50SG9sZGVyLnN0eWxlLnBhZGRpbmcgPSAiMHB4IjsKICBjb250ZW50SG9sZGVyLnN0eWxlLm1hcmdpbiA9ICIwcHgiOwoKICBjb250ZW50SG9sZGVyLmFwcGVuZChpRnJhbWUpOwogIGNvbnRhaW5lci5hcHBlbmQoY29udGVudEhvbGRlcik7CgogIC8vIGhlYWRlcgogIHZhciBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICBoZWFkZXIuaWQgPSAibGluay12aWV3ZXItaGVhZGVyIjsKCiAgaGVhZGVyLnN0eWxlLmFsbCA9ICJ1bnNldCI7CgogIGhlYWRlci5zdHlsZS5kaXNwbGF5ID0gImZsZXgiOwogIGhlYWRlci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICJzcGFjZS1iZXR3ZWVuIjsKICBoZWFkZXIuc3R5bGUuYWxpZ25JdGVtcyA9ICJjZW50ZXIiOwogIGhlYWRlci5zdHlsZS51c2VyU2VsZWN0ID0gIm5vbmUiOwogIGhlYWRlci5zdHlsZS5wYWRkaW5nID0gIjNweCI7CiAgaGVhZGVyLnN0eWxlLm1hcmdpbiA9ICIwcHgiOwogIGhlYWRlci5zdHlsZS5ib3JkZXJCb3R0b20gPSAic29saWQgMXB4ICNBQUEiOwoKICBoZWFkZXIuc3R5bGUuaGVpZ2h0ID0gIjIwcHgiOwogIGhlYWRlci5zdHlsZS53aWR0aCA9IE51bWJlcihjb250ZW50SG9sZGVyLnN0eWxlLndpZHRoLnNsaWNlKDAsIC0yKSAtIDYpICsgInB4IjsKCiAgdmFyIGRyYWdnZWQgPSBmYWxzZTsKICB2YXIgc3RhcnRYID0gMDsKICB2YXIgc3RhcnRZID0gMDsKICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vkb3duIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIHN0YXJ0WCA9IE51bWJlcihjb250YWluZXIuc3R5bGUubGVmdC5zbGljZSgwLCAtMikpIC0gZXZlbnQuY2xpZW50WDsKICAgIHN0YXJ0WSA9IE51bWJlcihjb250YWluZXIuc3R5bGUudG9wLnNsaWNlKDAsIC0yKSkgLSBldmVudC5jbGllbnRZOwogICAgZHJhZ2dlZCA9IHRydWU7CiAgfSk7CiAgaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNldXAiLCBmdW5jdGlvbihldmVudCkgewogICAgZHJhZ2dlZCA9IGZhbHNlOwogIH0pOwoKICAvLyBBbHNvIGtlZXBpbmcgdHJhY2sgb2Ygc2l6ZSB0b28KICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vtb3ZlIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIGlmIChkcmFnZ2VkKSB7CiAgICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSAoZXZlbnQuY2xpZW50WSArIHN0YXJ0WSkgKyAicHgiOwogICAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IChldmVudC5jbGllbnRYICsgc3RhcnRYKSArICJweCI7CiAgICB9CiAgICB2YXIgeCA9IE51bWJlcihjb250YWluZXIuc3R5bGUubGVmdC5zbGljZSgwLCAtMikpOwogICAgdmFyIHkgPSBOdW1iZXIoY29udGFpbmVyLnN0eWxlLnRvcC5zbGljZSgwLCAtMikpOwogICAgaWYgKHggPCAwKSB7CiAgICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gIjBweCI7CiAgICB9CiAgICBpZiAoeSA8IDApIHsKICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICIwcHgiOwogICAgfQoKICAgIGNvbnRlbnRIb2xkZXIuc3R5bGUuaGVpZ2h0ID0gaUZyYW1lLnN0eWxlLmhlaWdodDsKICAgIGNvbnRlbnRIb2xkZXIuc3R5bGUud2lkdGggPSBpRnJhbWUuc3R5bGUud2lkdGg7CgogICAgaGVhZGVyLnN0eWxlLndpZHRoID0gKE51bWJlcihjb250ZW50SG9sZGVyLnN0eWxlLndpZHRoLnNsaWNlKDAsIC0yKSkgLSA2KSArICJweCI7CgogICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gY29udGVudEhvbGRlci5zdHlsZS53aWR0aDsKICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAoTnVtYmVyKGNvbnRlbnRIb2xkZXIuc3R5bGUuaGVpZ2h0LnNsaWNlKDAsIC0yKSkgKyAyNykgKyAicHgiOwoKICAgIGlmKE51bWJlcihoZWFkZXIuc3R5bGUud2lkdGguc2xpY2UoMCwgLTIpKSA8IDMwMCl7CiAgICBjb250ZW50SG9sZGVyLnN0eWxlLndpZHRoID0gIjMwMHB4IjsKICAgIGhlYWRlci5zdHlsZS53aWR0aCA9ICIyOTRweCI7CiAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSAiMzAwcHgiOwogICAgaUZyYW1lLnN0eWxlLndpZHRoID0gIjMwMHB4IjsKICAgIH0KICB9KTsKCiAgLy8gdGV4dCBzdHVmZgogIHZhciBoZWFkZXJUZXh0SG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CgogIGhlYWRlclRleHRIb2xkZXIuc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgLy8gaGVhZGVyIHRleHQKICB2YXIgaGVhZGVyVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImgxIik7CiAgaGVhZGVyVGV4dC50ZXh0Q29udGVudCA9ICJMaW5rIFZpZXdlciI7CgogIGhlYWRlclRleHQuc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgaGVhZGVyVGV4dC5zdHlsZS5mb250RmFtaWx5ID0gInNhbnMtc2VyaWYiOwogIGhlYWRlclRleHQuc3R5bGUuY29sb3IgPSAiIzQ0NCI7CiAgaGVhZGVyVGV4dC5zdHlsZS5mb250U2l6ZSA9ICIyMHB4IjsKICBoZWFkZXJUZXh0LnN0eWxlLm1hcmdpbiA9ICIwcHgiOwogIGhlYWRlclRleHQuc3R5bGUucGFkZGluZyA9ICIwcHgiOwoKICBoZWFkZXJUZXh0SG9sZGVyLmFwcGVuZChoZWFkZXJUZXh0KTsKICBoZWFkZXIuYXBwZW5kKGhlYWRlclRleHRIb2xkZXIpOwoKICAvLyBidXR0b24gc3R1ZmYgCiAgdmFyIGhlYWRlckJ1dHRvbkhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoKICBoZWFkZXJCdXR0b25Ib2xkZXIuc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgLy8gbGluayBidXR0b24KICB2YXIgbEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogIGxCdXR0b24udGV4dENvbnRlbnQgPSAicnVuIHVybCI7CgogIGxCdXR0b24uc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgbEJ1dHRvbi5zdHlsZS5mb250RmFtaWx5ID0gInNhbnMtc2VyaWYiOwogIGxCdXR0b24uc3R5bGUud2lkdGggPSAiMTAwcHgiOwogIGxCdXR0b24uc3R5bGUuaGVpZ2h0ID0gIjIwcHgiOwogIGxCdXR0b24uc3R5bGUuY3Vyc29yID0gInBvaW50ZXIiOwogIGxCdXR0b24uc3R5bGUubWFyZ2luID0gIjBweCAzcHggMHB4IDNweCI7CiAgbEJ1dHRvbi5zdHlsZS5jb2xvciA9ICIjMzMzIjsKICBsQnV0dG9uLnN0eWxlLmJvcmRlciA9ICJzb2xpZCAxcHggIzMzMyI7CiAgbEJ1dHRvbi5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiMnB4IjsKICBsQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjRUVFIjsKICBsQnV0dG9uLnN0eWxlLnRleHRBbGlnbiA9ICJjZW50ZXIiOwoKICBsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICBsQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjREREIjsKICB9KTsKICBsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbGVhdmUiLCBmdW5jdGlvbihldmVudCkgewogICAgbEJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI0VFRSI7CiAgfSk7CiAgbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgIAoKICAgIGlGcmFtZS5zcmMgPSB1cmw7CiAgfSk7CgogIGhlYWRlckJ1dHRvbkhvbGRlci5hcHBlbmQobEJ1dHRvbik7CgogIC8vIG1pbmltaXplIGJ1dHRvbgogIHZhciBtQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7CiAgbUJ1dHRvbi50ZXh0Q29udGVudCA9ICItIjsKCiAgbUJ1dHRvbi5zdHlsZS5hbGwgPSAidW5zZXQiOwoKICBtQnV0dG9uLnN0eWxlLmZvbnRGYW1pbHkgPSAic2Fucy1zZXJpZiI7CiAgbUJ1dHRvbi5zdHlsZS53aWR0aCA9ICIyMHB4IjsKICBtQnV0dG9uLnN0eWxlLmhlaWdodCA9ICIyMHB4IjsKICBtQnV0dG9uLnN0eWxlLmN1cnNvciA9ICJwb2ludGVyIjsKICBtQnV0dG9uLnN0eWxlLm1hcmdpbiA9ICIwcHggM3B4IDBweCAzcHgiOwogIG1CdXR0b24uc3R5bGUuY29sb3IgPSAiIzMzMyI7CiAgbUJ1dHRvbi5zdHlsZS5ib3JkZXIgPSAic29saWQgMXB4ICMzMzMiOwogIG1CdXR0b24uc3R5bGUuYm9yZGVyUmFkaXVzID0gIjJweCI7CiAgbUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI0VFRSI7CiAgbUJ1dHRvbi5zdHlsZS50ZXh0QWxpZ24gPSAiY2VudGVyIjsKCiAgbUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCBmdW5jdGlvbihldmVudCkgewogICAgbUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI0RERCI7CiAgfSk7CiAgbUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWxlYXZlIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIG1CdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNFRUUiOwogIH0pOwogIG1CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbihldmVudCkgewogICAgdmFyIGNsb3NlZCA9IGNvbnRlbnRIb2xkZXIuc3R5bGUuZGlzcGxheSA9PT0gIm5vbmUiOwogICAgaWYgKGNsb3NlZCkgewogICAgICBjb250ZW50SG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICBoZWFkZXIuc3R5bGUuYm9yZGVyQm90dG9tID0gInNvbGlkIDFweCAjQUFBIjsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnRlbnRIb2xkZXIuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgaGVhZGVyLnN0eWxlLmJvcmRlckJvdHRvbSA9ICJub25lIjsKICAgIH0KICB9KTsKCiAgaGVhZGVyQnV0dG9uSG9sZGVyLmFwcGVuZChtQnV0dG9uKTsKCiAgLy8geCBidXR0b24KICB2YXIgeEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogIHhCdXR0b24udGV4dENvbnRlbnQgPSAieCI7CgogIHhCdXR0b24uc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgeEJ1dHRvbi5zdHlsZS5mb250RmFtaWx5ID0gInNhbnMtc2VyaWYiOwogIHhCdXR0b24uc3R5bGUud2lkdGggPSAiMjBweCI7CiAgeEJ1dHRvbi5zdHlsZS5oZWlnaHQgPSAiMjBweCI7CiAgeEJ1dHRvbi5zdHlsZS5jdXJzb3IgPSAicG9pbnRlciI7CiAgeEJ1dHRvbi5zdHlsZS5tYXJnaW4gPSAiMHB4IDNweCAwcHggM3B4IjsKICB4QnV0dG9uLnN0eWxlLmNvbG9yID0gIiMzMzMiOwogIHhCdXR0b24uc3R5bGUuYm9yZGVyID0gInNvbGlkIDFweCAjMzMzIjsKICB4QnV0dG9uLnN0eWxlLmJvcmRlclJhZGl1cyA9ICIycHgiOwogIHhCdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNGMzMiOwogIHhCdXR0b24uc3R5bGUudGV4dEFsaWduID0gImNlbnRlciI7CgogIHhCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdmVyIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIHhCdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNFMjIiOwogIH0pOwogIHhCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigibW91c2VsZWF2ZSIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICB4QnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjRjMzIjsKICB9KTsKICB4QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIGNvbnRhaW5lci5yZW1vdmUoKTsKICB9KTsKCiAgaGVhZGVyQnV0dG9uSG9sZGVyLmFwcGVuZCh4QnV0dG9uKTsKICBoZWFkZXIuYXBwZW5kKGhlYWRlckJ1dHRvbkhvbGRlcik7CgogIGNvbnRlbnRIb2xkZXIuYmVmb3JlKGhlYWRlcik7CgogIC8vIGFkZCB0byBib2R5CiAgZG9jdW1lbnQuYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYm9keSIpOwogIGRvY3VtZW50LmJvZHkuYXBwZW5kKGNvbnRhaW5lcik7Cn0pKCk7CiB9CnZhcgpoaXN0TGlzdCA9IFsiIl0sCmhpc3RQb3MgPSAwLApfc2NvcGUgPSB7fSwKX3dpbiwgLy8gYSB0b3AtbGV2ZWwgY29udGV4dApxdWVzdGlvbiwKX2luLApfb3V0LAp0b29NYW55TWF0Y2hlcyA9IG51bGwsCmxhc3RFcnJvciA9IG51bGw7CgpmdW5jdGlvbiByZWZvY3VzKCkKewogIF9pbi5ibHVyKCk7IC8vIE5lZWRlZCBmb3IgTW96aWxsYSB0byBzY3JvbGwgY29ycmVjdGx5LgogIF9pbi5mb2N1cygpOwp9CgpmdW5jdGlvbiBpbml0KCkKewogIF9pbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJpbnB1dCIpOwogIF9vdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgib3V0cHV0Iik7CgogIF93aW4gPSB3aW5kb3c7CgogIGlmIChvcGVuZXIgJiYgIW9wZW5lci5jbG9zZWQpCiAgewogICAgcHJpbnRsbigiVXNpbmcgYm9va21hcmtsZXQgdmVyc2lvbiBvZiBzaGVsbDogY29tbWFuZHMgd2lsbCBydW4gaW4gb3BlbmVyJ3MgY29udGV4dC4iLCAibWVzc2FnZSIpOwogICAgX3dpbiA9IHdpbmRvdzsKICB9CgogIGluaXRUYXJnZXQoKTsKCiAgcmVjYWxjdWxhdGVJbnB1dEhlaWdodCgpOwogIHJlZm9jdXMoKTsKfQoKZnVuY3Rpb24gaW5pdFRhcmdldCgpCnsKICBfd2luLlNoZWxsID0gd2luZG93OwogIF93aW4ucHJpbnQgPSBzaGVsbENvbW1hbmRzLnByaW50Owp9CgoKLy8gVW5sZXNzIHRoZSB1c2VyIGlzIHNlbGVjdGVkIHNvbWV0aGluZywgcmVmb2N1cyB0aGUgdGV4dGJveC4KLy8gKHJlcXVlc3RlZCBieSBjYWlsbG9uLCBicmVuZGFuLCBhc2EpCmZ1bmN0aW9uIGtlZXBGb2N1c0luVGV4dGJveChlKQp7CiAgdmFyIGcgPSBlLnNyY0VsZW1lbnQgPyBlLnNyY0VsZW1lbnQgOiBlLnRhcmdldDsgLy8gSUUgdnMuIHN0YW5kYXJkCgogIHdoaWxlICghZy50YWdOYW1lKQogICAgZyA9IGcucGFyZW50Tm9kZTsKICB2YXIgdCA9IGcudGFnTmFtZS50b1VwcGVyQ2FzZSgpOwogIGlmICh0PT0iQSIgfHwgdD09IklOUFVUIikKICAgIHJldHVybjsKCiAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHsKICAgIC8vIE1vemlsbGEKICAgIGlmIChTdHJpbmcod2luZG93LmdldFNlbGVjdGlvbigpKSkKICAgICAgcmV0dXJuOwogIH0KICBlbHNlIGlmIChkb2N1bWVudC5nZXRTZWxlY3Rpb24pIHsKICAgIC8vIE9wZXJhPyBOZXRzY2FwZSA0PwogICAgaWYgKGRvY3VtZW50LmdldFNlbGVjdGlvbigpKQogICAgICByZXR1cm47CiAgfQogIGVsc2UgewogICAgLy8gSUUKICAgIGlmICggZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkudGV4dCApCiAgICAgIHJldHVybjsKICB9CgogIHJlZm9jdXMoKTsKfQoKZnVuY3Rpb24gaW5wdXRLZXlkb3duKGUpIHsKICAvLyBVc2Ugb25rZXlkb3duIGJlY2F1c2UgSUUgZG9lc24ndCBzdXBwb3J0IG9ua2V5cHJlc3MgZm9yIGFycm93IGtleXMKCiAgLy9hbGVydChlLmtleUNvZGUgKyAiIF4gIiArIGUua2V5Y29kZSk7CgogIGlmIChlLnNoaWZ0S2V5ICYmIGUua2V5Q29kZSA9PSAxMykgeyAvLyBzaGlmdC1lbnRlcgogICAgLy8gZG9uJ3QgZG8gYW55dGhpbmc7IGFsbG93IHRoZSBzaGlmdC1lbnRlciB0byBpbnNlcnQgYSBsaW5lIGJyZWFrIGFzIG5vcm1hbAogIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDEzKSB7IC8vIGVudGVyCiAgICAvLyBleGVjdXRlIHRoZSBpbnB1dCBvbiBlbnRlcgogICAgdHJ5IHsgZ28oKTsgfSBjYXRjaChlcikgeyBhbGVydChlcik7IH07CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBfaW4udmFsdWUgPSAiIjsgfSwgMCk7IC8vIGNhbid0IHByZXZlbnREZWZhdWx0IG9uIGlucHV0LCBzbyBjbGVhciBpdCBsYXRlcgogIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDM4KSB7IC8vIHVwCiAgICAvLyBnbyB1cCBpbiBoaXN0b3J5IGlmIGF0IHRvcCBvciBjdHJsLXVwCiAgICBpZiAoZS5jdHJsS2V5IHx8IGNhcmV0SW5GaXJzdExpbmUoX2luKSkKICAgICAgaGlzdCh0cnVlKTsKICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PSA0MCkgeyAvLyBkb3duCiAgICAvLyBnbyBkb3duIGluIGhpc3RvcnkgaWYgYXQgZW5kIG9yIGN0cmwtZG93bgogICAgaWYgKGUuY3RybEtleSB8fCBjYXJldEluTGFzdExpbmUoX2luKSkKICAgICAgaGlzdChmYWxzZSk7CiAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gOSkgeyAvLyB0YWIKICAgIHRhYmNvbXBsZXRlKCk7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyByZWZvY3VzKCk7IH0sIDApOyAvLyByZWZvY3VzIGJlY2F1c2UgdGFiIHdhcyBoaXQKICB9IGVsc2UgeyB9CgogIHNldFRpbWVvdXQocmVjYWxjdWxhdGVJbnB1dEhlaWdodCwgMCk7CgogIC8vcmV0dXJuIHRydWU7Cn07CgpmdW5jdGlvbiBjYXJldEluRmlyc3RMaW5lKHRleHRib3gpCnsKICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgc2VsZWN0aW9uU3RhcnQvc2VsZWN0aW9uRW5kCiAgaWYgKHRleHRib3guc2VsZWN0aW9uU3RhcnQgPT0gdW5kZWZpbmVkKQogICAgcmV0dXJuIHRydWU7CgogIHZhciBmaXJzdExpbmVCcmVhayA9IHRleHRib3gudmFsdWUuaW5kZXhPZigiXG4iKTsKCiAgcmV0dXJuICgoZmlyc3RMaW5lQnJlYWsgPT0gLTEpIHx8ICh0ZXh0Ym94LnNlbGVjdGlvblN0YXJ0IDw9IGZpcnN0TGluZUJyZWFrKSk7Cn0KCmZ1bmN0aW9uIGNhcmV0SW5MYXN0TGluZSh0ZXh0Ym94KQp7CiAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvblN0YXJ0L3NlbGVjdGlvbkVuZAogIGlmICh0ZXh0Ym94LnNlbGVjdGlvbkVuZCA9PSB1bmRlZmluZWQpCiAgICByZXR1cm4gdHJ1ZTsKCiAgdmFyIGxhc3RMaW5lQnJlYWsgPSB0ZXh0Ym94LnZhbHVlLmxhc3RJbmRleE9mKCJcbiIpOwoKICByZXR1cm4gKHRleHRib3guc2VsZWN0aW9uRW5kID4gbGFzdExpbmVCcmVhayk7Cn0KCmZ1bmN0aW9uIHJlY2FsY3VsYXRlSW5wdXRIZWlnaHQoKQp7CiAgdmFyIHJvd3MgPSBfaW4udmFsdWUuc3BsaXQoL1xuLykubGVuZ3RoCiAgICArIDEgLy8gcHJldmVudCBzY3JvbGxiYXIgZmxpY2tlcmluZyBpbiBNb3ppbGxhCiAgICArICh3aW5kb3cub3BlcmEgPyAxIDogMCk7IC8vIGxlYXZlIHJvb20gZm9yIHNjcm9sbGJhciBpbiBPcGVyYQoKICBpZiAoX2luLnJvd3MgIT0gcm93cykgLy8gd2l0aG91dCB0aGlzIGNoZWNrLCBpdCBpcyBpbXBvc3NpYmxlIHRvIHNlbGVjdCB0ZXh0IGluIE9wZXJhIDcuNjAgb3IgT3BlcmEgOC4wLgogICAgX2luLnJvd3MgPSByb3dzOwp9CgpmdW5jdGlvbiBwcmludGxuKHMsIHR5cGUpCnsKICBpZigocz1TdHJpbmcocykpKQogIHsKICAgIHZhciBuZXdkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIG5ld2Rpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKSk7CiAgICBuZXdkaXYuY2xhc3NOYW1lID0gdHlwZTsKICAgIF9vdXQuYXBwZW5kQ2hpbGQobmV3ZGl2KTsKICAgIHJldHVybiBuZXdkaXY7CiAgfQp9CgpmdW5jdGlvbiBwcmludFdpdGhSdW5pbihoLCBzLCB0eXBlKQp7CiAgdmFyIGRpdiA9IHByaW50bG4ocywgdHlwZSk7CiAgdmFyIGhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHJvbmciKTsKICBoZWFkLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGggKyAiOiAiKSk7CiAgZGl2Lmluc2VydEJlZm9yZShoZWFkLCBkaXYuZmlyc3RDaGlsZCk7Cn0KCgp2YXIgc2hlbGxDb21tYW5kcyA9CnsKbG9hZCA6IGZ1bmN0aW9uIGxvYWQodXJsKQp7CiAgdmFyIHMgPSBfd2luLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogIHMudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogIHMuc3JjID0gdXJsOwogIF93aW4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXS5hcHBlbmRDaGlsZChzKTsKICBwcmludGxuKCJMb2FkaW5nICIgKyB1cmwgKyAiLi4uIiwgIm1lc3NhZ2UiKTsKfSwKCmNsZWFyIDogZnVuY3Rpb24gY2xlYXIoKQp7CiAgdmFyIENISUxEUkVOX1RPX1BSRVNFUlZFID0gMzsKICB3aGlsZSAoX291dC5jaGlsZE5vZGVzW0NISUxEUkVOX1RPX1BSRVNFUlZFXSkKICAgIF9vdXQucmVtb3ZlQ2hpbGQoX291dC5jaGlsZE5vZGVzW0NISUxEUkVOX1RPX1BSRVNFUlZFXSk7Cn0sCgpwcmludCA6IGZ1bmN0aW9uIHByaW50KHMpIHsgcHJpbnRsbihzLCAicHJpbnQiKTsgfSwKCi8vIHRoZSBub3JtYWwgZnVuY3Rpb24sICJwcmludCIsIHNob3VsZG4ndCByZXR1cm4gYSB2YWx1ZQovLyAoc3VnZ2VzdGVkIGJ5IGJyZW5kYW47IGxhdGVyIG5vdGljZWQgaXQgd2FzIGEgcHJvYmxlbSB3aGVuIHNob3dpbmcgb3RoZXJzKQpwciA6IGZ1bmN0aW9uIHByKHMpCnsKICBzaGVsbENvbW1hbmRzLnByaW50KHMpOyAvLyBuZWVkIHRvIHNwZWNpZnkgc2hlbGxDb21tYW5kcyBzbyBpdCBkb2Vzbid0IHRyeSB3aW5kb3cucHJpbnQoKSEKICByZXR1cm4gczsKfSwKCnByb3BzIDogZnVuY3Rpb24gcHJvcHMoZSwgb25lUGVyTGluZSkKewogIGlmIChlID09PSBudWxsKSB7CiAgICBwcmludGxuKCJwcm9wcyBjYWxsZWQgd2l0aCBudWxsIGFyZ3VtZW50IiwgImVycm9yIik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoZSA9PT0gdW5kZWZpbmVkKSB7CiAgICBwcmludGxuKCJwcm9wcyBjYWxsZWQgd2l0aCB1bmRlZmluZWQgYXJndW1lbnQiLCAiZXJyb3IiKTsKICAgIHJldHVybjsKICB9CgogIHZhciBucyA9IFsiTWV0aG9kcyIsICJGaWVsZHMiLCAiVW5yZWFjaGFibGVzIl07CiAgdmFyIGFzID0gW1tdLCBbXSwgW11dOyAvLyBhcnJheSBvZiAoZW1wdHkpIGFycmF5cyBvZiBhcnJheXMhCiAgdmFyIHAsIGosIGk7IC8vIGxvb3AgdmFyaWFibGVzLCBzZXZlcmFsIHVzZWQgbXVsdGlwbGUgdGltZXMKCiAgdmFyIHByb3RvTGV2ZWxzID0gMDsKCiAgZm9yIChwID0gZTsgcDsgcCA9IHAuX19wcm90b19fKQogIHsKICAgIGZvciAoaT0wOyBpPG5zLmxlbmd0aDsgKytpKQogICAgICBhc1tpXVtwcm90b0xldmVsc10gPSBbXTsKICAgICsrcHJvdG9MZXZlbHM7CiAgfQoKICBmb3IodmFyIGEgaW4gZSkKICB7CiAgICAvLyBTaG9ydGNvbWluZzogZG9lc24ndCBjaGVjayB0aGF0IFZBTFVFUyBhcmUgdGhlIHNhbWUgaW4gb2JqZWN0IGFuZCBwcm90b3R5cGUuCgogICAgdmFyIHByb3RvTGV2ZWwgPSAtMTsKICAgIHRyeQogICAgewogICAgICBmb3IgKHAgPSBlOyBwICYmIChhIGluIHApOyBwID0gcC5fX3Byb3RvX18pCiAgICAgICAgKytwcm90b0xldmVsOwogICAgfQogICAgY2F0Y2goZXIpIHsgcHJvdG9MZXZlbCA9IDA7IH0gLy8gImluIiBvcGVyYXRvciB0aHJvd3Mgd2hlbiBwYXJhbSB0byBwcm9wcygpIGlzIGEgc3RyaW5nCgogICAgdmFyIHR5cGUgPSAxOwogICAgdHJ5CiAgICB7CiAgICAgIGlmICgodHlwZW9mIGVbYV0pID09ICJmdW5jdGlvbiIpCiAgICAgICAgdHlwZSA9IDA7CiAgICB9CiAgICBjYXRjaCAoZXIpIHsgdHlwZSA9IDI7IH0KCiAgICBhc1t0eXBlXVtwcm90b0xldmVsXS5wdXNoKGEpOwogIH0KCiAgZnVuY3Rpb24gdGltZXMocywgbikgeyByZXR1cm4gbiA/IHMgKyB0aW1lcyhzLCBuLTEpIDogIiI7IH0KCiAgZm9yIChqPTA7IGo8cHJvdG9MZXZlbHM7ICsraikKICAgIGZvciAoaT0wO2k8bnMubGVuZ3RoOysraSkKICAgICAgaWYgKGFzW2ldW2pdLmxlbmd0aCkKICAgICAgICBwcmludFdpdGhSdW5pbigKICAgICAgICAgIG5zW2ldICsgdGltZXMoIiBvZiBwcm90b3R5cGUiLCBqKSwKICAgICAgICAgIChvbmVQZXJMaW5lID8gIlxuXG4iIDogIiIpICsgYXNbaV1bal0uc29ydCgpLmpvaW4ob25lUGVyTGluZSA/ICJcbiIgOiAiLCAiKSArIChvbmVQZXJMaW5lID8gIlxuXG4iIDogIiIpLAogICAgICAgICAgInByb3BMaXN0IgogICAgICAgICk7Cn0sCgpibGluayA6IGZ1bmN0aW9uIGJsaW5rKG5vZGUpCnsKICBpZiAoIW5vZGUpICAgICAgICAgICAgICAgICAgICAgdGhyb3coImJsaW5rOiBhcmd1bWVudCBpcyBudWxsIG9yIHVuZGVmaW5lZC4iKTsKICBpZiAobm9kZS5ub2RlVHlwZSA9PSBudWxsKSAgICAgdGhyb3coImJsaW5rOiBhcmd1bWVudCBtdXN0IGJlIGEgbm9kZS4iKTsKICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKSAgICAgICAgdGhyb3coImJsaW5rOiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIHRleHQgbm9kZSIpOwogIGlmIChub2RlLmRvY3VtZW50RWxlbWVudCkgICAgICB0aHJvdygiYmxpbms6IGFyZ3VtZW50IG11c3Qgbm90IGJlIHRoZSBkb2N1bWVudCBvYmplY3QiKTsKCiAgZnVuY3Rpb24gc2V0T3V0bGluZShvKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChub2RlLnN0eWxlLm91dGxpbmUgIT0gbm9kZS5zdHlsZS5ib2d1c1Byb3BlcnR5KSB7CiAgICAgICAgLy8gYnJvd3NlciBzdXBwb3J0cyBvdXRsaW5lIChGaXJlZm94IDEuMSBhbmQgbmV3ZXIsIENTUzMsIE9wZXJhIDgpLgogICAgICAgIG5vZGUuc3R5bGUub3V0bGluZSA9IG87CiAgICAgIH0KICAgICAgZWxzZSBpZiAobm9kZS5zdHlsZS5Nb3pPdXRsaW5lICE9IG5vZGUuc3R5bGUuYm9ndXNQcm9wZXJ0eSkgewogICAgICAgIC8vIGJyb3dzZXIgc3VwcG9ydHMgTW96T3V0bGluZSAoRmlyZWZveCAxLjAueCBhbmQgb2xkZXIpCiAgICAgICAgbm9kZS5zdHlsZS5Nb3pPdXRsaW5lID0gbzsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICAvLyBicm93c2VyIG9ubHkgc3VwcG9ydHMgYm9yZGVyIChJRSkuIGJvcmRlciBpcyBhIGZhbGxiYWNrIGJlY2F1c2UgaXQgbW92ZXMgdGhpbmdzIGFyb3VuZC4KICAgICAgICBub2RlLnN0eWxlLmJvcmRlciA9IG87CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGZvY3VzSXQoYSkgewogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICBhLmZvY3VzKCk7CiAgICB9CiAgfQoKICBpZiAobm9kZS5vd25lckRvY3VtZW50KSB7CiAgICB2YXIgd2luZG93VG9Gb2N1c05vdyA9IChub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgbm9kZS5vd25lckRvY3VtZW50LnBhcmVudFdpbmRvdyk7IC8vIE1veiB2cy4gSUUKICAgIGlmICh3aW5kb3dUb0ZvY3VzTm93KQogICAgICBzZXRUaW1lb3V0KGZvY3VzSXQod2luZG93VG9Gb2N1c05vdy50b3ApLCAwKTsKICB9CgogIGZvcih2YXIgaT0xO2k8NzsrK2kpCiAgICBzZXRUaW1lb3V0KHNldE91dGxpbmUoKGklMik/JzNweCBzb2xpZCByZWQnOidub25lJyksIGkqMTAwKTsKCiAgc2V0VGltZW91dChmb2N1c0l0KHdpbmRvdyksIDgwMCk7CiAgc2V0VGltZW91dChmb2N1c0l0KF9pbiksIDgxMCk7Cn0sCgpzY29wZSA6IGZ1bmN0aW9uIHNjb3BlKHNjKQp7CiAgaWYgKCFzYykgc2MgPSB7fTsKICBfc2NvcGUgPSBzYzsKICBwcmludGxuKCJTY29wZSBpcyBub3cgIiArIHNjICsgIi4gIElmIGEgdmFyaWFibGUgaXMgbm90IGZvdW5kIGluIHRoaXMgc2NvcGUsIHdpbmRvdyB3aWxsIGFsc28gYmUgc2VhcmNoZWQuICBOZXcgdmFyaWFibGVzIHdpbGwgc3RpbGwgZ28gb24gd2luZG93LiIsICJtZXNzYWdlIik7Cn0sCgptYXRoSGVscCA6IGZ1bmN0aW9uIG1hdGhIZWxwKCkKewogIHByaW50V2l0aFJ1bmluKCJNYXRoIGNvbnN0YW50cyIsICJFLCBMTjIsIExOMTAsIExPRzJFLCBMT0cxMEUsIFBJLCBTUVJUMV8yLCBTUVJUMiIsICJwcm9wTGlzdCIpOwogIHByaW50V2l0aFJ1bmluKCJNYXRoIG1ldGhvZHMiLCAiYWJzLCBhY29zLCBhc2luLCBhdGFuLCBhdGFuMiwgY2VpbCwgY29zLCBleHAsIGZsb29yLCBsb2csIG1heCwgbWluLCBwb3csIHJhbmRvbSwgcm91bmQsIHNpbiwgc3FydCwgdGFuIiwgInByb3BMaXN0Iik7Cn0sCgphbnMgOiB1bmRlZmluZWQKfTsKCgpmdW5jdGlvbiBoaXN0KHVwKQp7CiAgLy8gaGlzdExpc3RbMF0gPSBmaXJzdCBjb21tYW5kIGVudGVyZWQsIFsxXSA9IHNlY29uZCwgZXRjLgogIC8vIHR5cGUgc29tZXRoaW5nLCBwcmVzcyB1cCAtLT4gdGhpbmcgdHlwZWQgaXMgbm93IGluICJsaW1ibyIKICAvLyAobGFzdCBpdGVtIGluIGhpc3RMaXN0KSBhbmQgc2hvdWxkIGJlIHJlYWNoYWJsZSBieSBwcmVzc2luZwogIC8vIGRvd24gYWdhaW4uCgogIHZhciBMID0gaGlzdExpc3QubGVuZ3RoOwoKICBpZiAoTCA9PSAxKQogICAgcmV0dXJuOwoKICBpZiAodXApCiAgewogICAgaWYgKGhpc3RQb3MgPT0gTC0xKQogICAgewogICAgICAvLyBTYXZlIHRoaXMgZW50cnkgaW4gY2FzZSB0aGUgdXNlciBoaXRzIHRoZSBkb3duIGtleS4KICAgICAgaGlzdExpc3RbaGlzdFBvc10gPSBfaW4udmFsdWU7CiAgICB9CgogICAgaWYgKGhpc3RQb3MgPiAwKQogICAgewogICAgICBoaXN0UG9zLS07CiAgICAgIC8vIFVzZSBhIHRpbWVvdXQgdG8gcHJldmVudCB1cCBmcm9tIG1vdmluZyBjdXJzb3Igd2l0aGluIG5ldyB0ZXh0CiAgICAgIC8vIFNldCB0byBub3RoaW5nIGZpcnN0IGZvciB0aGUgc2FtZSByZWFzb24KICAgICAgc2V0VGltZW91dCgKICAgICAgICBmdW5jdGlvbigpIHsKICAgICAgICAgIF9pbi52YWx1ZSA9ICcnOwogICAgICAgICAgX2luLnZhbHVlID0gaGlzdExpc3RbaGlzdFBvc107CiAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBfaW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgaWYgKF9pbi5zZXRTZWxlY3Rpb25SYW5nZSkKICAgICAgICAgICAgX2luLnNldFNlbGVjdGlvblJhbmdlKGNhcmV0UG9zLCBjYXJldFBvcyk7CiAgICAgICAgfSwKICAgICAgICAwCiAgICAgICk7CiAgICB9CiAgfQogIGVsc2UgLy8gZG93bgogIHsKICAgIGlmIChoaXN0UG9zIDwgTC0xKQogICAgewogICAgICBoaXN0UG9zKys7CiAgICAgIF9pbi52YWx1ZSA9IGhpc3RMaXN0W2hpc3RQb3NdOwogICAgfQogICAgZWxzZSBpZiAoaGlzdFBvcyA9PSBMLTEpCiAgICB7CiAgICAgIC8vIEFscmVhZHkgb24gdGhlIGN1cnJlbnQgZW50cnk6IGNsZWFyIGJ1dCBzYXZlCiAgICAgIGlmIChfaW4udmFsdWUpCiAgICAgIHsKICAgICAgICBoaXN0TGlzdFtoaXN0UG9zXSA9IF9pbi52YWx1ZTsKICAgICAgICArK2hpc3RQb3M7CiAgICAgICAgX2luLnZhbHVlID0gIiI7CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHRhYmNvbXBsZXRlKCkKewogIC8qCiAgICogV29ya2luZyBiYWNrd2FyZHMgZnJvbSBzW2Zyb21dLCBmaW5kIHRoZSBzcG90CiAgICogd2hlcmUgdGhpcyBleHByZXNzaW9uIHN0YXJ0cy4gIEl0IHdpbGwgc2NhbgogICAqIHVudGlsIGl0IGhpdHMgYSBtaXNtYXRjaGVkICggb3IgYSBzcGFjZSwKICAgKiBidXQgaXQgc2tpcHMgb3ZlciBxdW90ZWQgc3RyaW5ncy4KICAgKiBJZiBzdG9wQXREb3QgaXMgdHJ1ZSwgc3RvcCBhdCBhICcuJwogICAqLwogIGZ1bmN0aW9uIGZpbmRiZWdpbm5pbmcocywgZnJvbSwgc3RvcEF0RG90KQogIHsKICAgIC8qCiAgICAgKiAgQ29tcGxpY2F0ZWQgZnVuY3Rpb24uCiAgICAgKgogICAgICogIFJldHVybiB0cnVlIGlmIHNbaV0gPT0gcSBCVVQgT05MWSBJRgogICAgICogIHNbaS0xXSBpcyBub3QgYSBiYWNrc2xhc2guCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVxdWFsQnV0Tm90RXNjYXBlZChzLGkscSkKICAgIHsKICAgICAgaWYocy5jaGFyQXQoaSkgIT0gcSkgLy8gbm90IGVxdWFsIGdvIG5vIGZ1cnRoZXIKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICBpZihpPT0wKSAvLyBiZWdpbm5pbmcgb2Ygc3RyaW5nCiAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICBpZihzLmNoYXJBdChpLTEpID09ICdcXCcpIC8vIGVzY2FwZWQ/CiAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgdmFyIG5wYXJlbnMgPSAwOwogICAgdmFyIGk7CiAgICBmb3IoaT1mcm9tOyBpPj0wOyBpLS0pCiAgICB7CiAgICAgIGlmKHMuY2hhckF0KGkpID09ICcgJykKICAgICAgICBicmVhazsKCiAgICAgIGlmKHN0b3BBdERvdCAmJiBzLmNoYXJBdChpKSA9PSAnLicpCiAgICAgICAgYnJlYWs7CgogICAgICBpZihzLmNoYXJBdChpKSA9PSAnKScpCiAgICAgICAgbnBhcmVucysrOwogICAgICBlbHNlIGlmKHMuY2hhckF0KGkpID09ICcoJykKICAgICAgICBucGFyZW5zLS07CgogICAgICBpZihucGFyZW5zIDwgMCkKICAgICAgICBicmVhazsKCiAgICAgIC8vIHNraXAgcXVvdGVkIHN0cmluZ3MKICAgICAgaWYocy5jaGFyQXQoaSkgPT0gJ1wnJyB8fCBzLmNoYXJBdChpKSA9PSAnXCInKQogICAgICB7CiAgICAgICAgLy9kdW1wKCJza2lwcGluZyBxdW90ZWQgY2hhcnM6ICIpOwogICAgICAgIHZhciBxdW90ID0gcy5jaGFyQXQoaSk7CiAgICAgICAgaS0tOwogICAgICAgIHdoaWxlKGkgPj0gMCAmJiAhZXF1YWxCdXROb3RFc2NhcGVkKHMsaSxxdW90KSkgewogICAgICAgICAgLy9kdW1wKHMuY2hhckF0KGkpKTsKICAgICAgICAgIGktLTsKICAgICAgICB9CiAgICAgICAgLy9kdW1wKCJcbiIpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gaTsKICB9CgogIC8vIFhYWCBzaG91bGQgYmUgdXNlZCBtb3JlIGNvbnNpc3RlbnRseSAoaW5zdGVhZCBvZiB1c2luZyBzZWxlY3Rpb25TdGFydC9zZWxlY3Rpb25FbmQgdGhyb3VnaG91dCBjb2RlKQogIC8vIFhYWCBkb2Vzbid0IHdvcmsgaW4gSUUsIGV2ZW4gdGhvdWdoIGl0IGNvbnRhaW5zIElFLXNwZWNpZmljIGNvZGUKICBmdW5jdGlvbiBnZXRjYXJldHBvcyhpbnApCiAgewogICAgaWYoaW5wLnNlbGVjdGlvbkVuZCAhPSBudWxsKQogICAgICByZXR1cm4gaW5wLnNlbGVjdGlvbkVuZDsKCiAgICBpZihpbnAuY3JlYXRlVGV4dFJhbmdlKQogICAgewogICAgICB2YXIgZG9jcmFuZ2UgPSBfd2luLlNoZWxsLmRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOwogICAgICB2YXIgaW5wcmFuZ2UgPSBpbnAuY3JlYXRlVGV4dFJhbmdlKCk7CiAgICAgIGlmIChpbnByYW5nZS5zZXRFbmRQb2ludCkKICAgICAgewogICAgICAgIGlucHJhbmdlLnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0JywgZG9jcmFuZ2UpOwogICAgICAgIHJldHVybiBpbnByYW5nZS50ZXh0Lmxlbmd0aDsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBpbnAudmFsdWUubGVuZ3RoOyAvLyBzdWNrcywgcHVudAogIH0KCiAgZnVuY3Rpb24gc2V0c2VsZWN0aW9udG8oaW5wLHBvcykKICB7CiAgICBpZihpbnAuc2VsZWN0aW9uU3RhcnQpIHsKICAgICAgaW5wLnNlbGVjdGlvblN0YXJ0ID0gaW5wLnNlbGVjdGlvbkVuZCA9IHBvczsKICAgIH0KICAgIGVsc2UgaWYoaW5wLmNyZWF0ZVRleHRSYW5nZSkgewogICAgICB2YXIgZG9jcmFuZ2UgPSBfd2luLlNoZWxsLmRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOwogICAgICB2YXIgaW5wcmFuZ2UgPSBpbnAuY3JlYXRlVGV4dFJhbmdlKCk7CiAgICAgIGlucHJhbmdlLm1vdmUoJ2NoYXJhY3RlcicscG9zKTsKICAgICAgaW5wcmFuZ2Uuc2VsZWN0KCk7CiAgICB9CiAgICBlbHNlIHsgLy8gZXJyLi4uCiAgICAvKgogICAgICBpbnAuc2VsZWN0KCk7CiAgICAgIGlmKF93aW4uU2hlbGwuZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkpCiAgICAgICAgX3dpbi5TaGVsbC5kb2N1bWVudC5nZXRTZWxlY3Rpb24oKSA9ICIiOwogICAgICAgICovCiAgICB9CiAgfQogICAgLy8gZ2V0IHBvc2l0aW9uIG9mIGN1cnNvciB3aXRoaW4gdGhlIGlucHV0IGJveAogICAgdmFyIGNhcmV0ID0gZ2V0Y2FyZXRwb3MoX2luKTsKCiAgICBpZihjYXJldCkgewogICAgICAvL2R1bXAoIi0tLS1cbiIpOwogICAgICB2YXIgZG90cG9zLCBzcGFjZXBvcywgY29tcGxldGUsIG9iajsKICAgICAgLy9kdW1wKCJjYXJldCBwb3M6ICIgKyBjYXJldCArICJcbiIpOwogICAgICAvLyBzZWUgaWYgdGhlcmUncyBhIGRvdCBiZWZvcmUgaGVyZQogICAgICBkb3Rwb3MgPSBmaW5kYmVnaW5uaW5nKF9pbi52YWx1ZSwgY2FyZXQtMSwgdHJ1ZSk7CiAgICAgIC8vZHVtcCgiZG90IHBvczogIiArIGRvdHBvcyArICJcbiIpOwogICAgICBpZihkb3Rwb3MgPT0gLTEgfHwgX2luLnZhbHVlLmNoYXJBdChkb3Rwb3MpICE9ICcuJykgewogICAgICAgIGRvdHBvcyA9IGNhcmV0OwovL2R1bXAoImNoYW5nZWQgZG90IHBvczogIiArIGRvdHBvcyArICJcbiIpOwogICAgICB9CgogICAgICAvLyBsb29rIGJhY2t3YXJkcyBmb3IgYSBub24tdmFyaWFibGUtbmFtZSBjaGFyYWN0ZXIKICAgICAgc3BhY2Vwb3MgPSBmaW5kYmVnaW5uaW5nKF9pbi52YWx1ZSwgZG90cG9zLTEsIGZhbHNlKTsKICAgICAgLy9kdW1wKCJzcGFjZSBwb3M6ICIgKyBzcGFjZXBvcyArICJcbiIpOwogICAgICAvLyBnZXQgdGhlIG9iamVjdCB3ZSdyZSB0cnlpbmcgdG8gY29tcGxldGUgb24KICAgICAgaWYoc3BhY2Vwb3MgPT0gZG90cG9zIHx8IHNwYWNlcG9zKzEgPT0gZG90cG9zIHx8IGRvdHBvcyA9PSBjYXJldCkKICAgICAgewogICAgICAgIC8vIHRyeSBjb21wbGV0aW5nIGZ1bmN0aW9uIGFyZ3MKICAgICAgICBpZihfaW4udmFsdWUuY2hhckF0KGRvdHBvcykgPT0gJygnIHx8CiAoX2luLnZhbHVlLmNoYXJBdChzcGFjZXBvcykgPT0gJygnICYmIChzcGFjZXBvcysxKSA9PSBkb3Rwb3MpKQogICAgICAgIHsKICAgICAgICAgIHZhciBmbixmbmFtZTsKICB2YXIgZnJvbSA9IChfaW4udmFsdWUuY2hhckF0KGRvdHBvcykgPT0gJygnKSA/IGRvdHBvcyA6IHNwYWNlcG9zOwogICAgICAgICAgc3BhY2Vwb3MgPSBmaW5kYmVnaW5uaW5nKF9pbi52YWx1ZSwgZnJvbS0xLCBmYWxzZSk7CgogICAgICAgICAgZm5hbWUgPSBfaW4udmFsdWUuc3Vic3RyKHNwYWNlcG9zKzEsZnJvbS0oc3BhY2Vwb3MrMSkpOwogIC8vZHVtcCgiZm5hbWU6ICIgKyBmbmFtZSArICJcbiIpOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgd2l0aChfd2luLlNoZWxsLl9zY29wZSkKICAgICAgICAgICAgICB3aXRoKF93aW4pCiAgICAgICAgICAgICAgICB3aXRoKFNoZWxsLnNoZWxsQ29tbWFuZHMpCiAgICAgICAgICAgICAgICAgIGZuID0gZXZhbChmbmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgICBjYXRjaChlcikgewogICAgICAgICAgICAvL2R1bXAoJ2ZuIGlzIG5vdCBhIHZhbGlkIG9iamVjdFxuJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGZuID09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgLy9kdW1wKCdmbiBpcyB1bmRlZmluZWQnKTsKICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGZuIGluc3RhbmNlb2YgRnVuY3Rpb24pCiAgICAgICAgICB7CiAgICAgICAgICAgIC8vIFByaW50IGZ1bmN0aW9uIGRlZmluaXRpb24sIGluY2x1ZGluZyBhcmd1bWVudCBuYW1lcywgYnV0IG5vdCBmdW5jdGlvbiBib2R5CiAgICAgICAgICAgIGlmKCFmbi50b1N0cmluZygpLm1hdGNoKC9mdW5jdGlvbiAuKz9cKFwpICtce1xuICtcW25hdGl2ZSBjb2RlXF1cblx9LykpCiAgICAgICAgICAgICAgcHJpbnRsbihmbi50b1N0cmluZygpLm1hdGNoKC9mdW5jdGlvbiAuKz9cKC4qP1wpLyksICJ0YWJjb21wbGV0ZSIpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgICAgb2JqID0gX3dpbjsKICAgICAgfQogICAgICBlbHNlCiAgICAgIHsKICAgICAgICB2YXIgb2JqbmFtZSA9IF9pbi52YWx1ZS5zdWJzdHIoc3BhY2Vwb3MrMSxkb3Rwb3MtKHNwYWNlcG9zKzEpKTsKICAgICAgICAvL2R1bXAoIm9iam5hbWU6IHwiICsgb2JqbmFtZSArICJ8XG4iKTsKICAgICAgICB0cnkgewogICAgICAgICAgd2l0aChfd2luLlNoZWxsLl9zY29wZSkKICAgICAgICAgICAgd2l0aChfd2luKQogICAgICAgICAgICAgICAgb2JqID0gZXZhbChvYmpuYW1lKTsKICAgICAgICB9CiAgICAgICAgY2F0Y2goZXIpIHsKICAgICAgICAgIHByaW50RXJyb3IoZXIpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZihvYmogPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAvLyBzb21ldGltZXMgdGhpcyBpcyB0YWJjb21wbGV0ZSdzIGZhdWx0LCBzbyBkb24ndCBwcmludCBpdCA6KAogICAgICAgICAgLy8gZS5nLiBjb21wbGV0aW5nIGZyb20gInByaW50KGRvY3VtZW50LmdldEVsZW1lbnRzIgogICAgICAgICAgLy8gcHJpbnRsbigiQ2FuJ3QgY29tcGxldGUgZnJvbSBudWxsIG9yIHVuZGVmaW5lZCBleHByZXNzaW9uICIgKyBvYmpuYW1lLCAiZXJyb3IiKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy9kdW1wKCJvYmo6ICIgKyBvYmogKyAiXG4iKTsKICAgICAgLy8gZ2V0IHRoZSB0aGluZyB3ZSdyZSB0cnlpbmcgdG8gY29tcGxldGUKICAgICAgaWYoZG90cG9zID09IGNhcmV0KQogICAgICB7CiAgICAgICAgaWYoc3BhY2Vwb3MrMSA9PSBkb3Rwb3MgfHwgc3BhY2Vwb3MgPT0gZG90cG9zKQogICAgICAgIHsKICAgICAgICAgIC8vIG5vdGhpbmcgdG8gY29tcGxldGUKICAgICAgICAgIC8vZHVtcCgibm90aGluZyB0byBjb21wbGV0ZVxuIik7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBjb21wbGV0ZSA9IF9pbi52YWx1ZS5zdWJzdHIoc3BhY2Vwb3MrMSxkb3Rwb3MtKHNwYWNlcG9zKzEpKTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBjb21wbGV0ZSA9IF9pbi52YWx1ZS5zdWJzdHIoZG90cG9zKzEsY2FyZXQtKGRvdHBvcysxKSk7CiAgICAgIH0KICAgICAgLy9kdW1wKCJjb21wbGV0ZTogIiArIGNvbXBsZXRlICsgIlxuIik7CiAgICAgIC8vIG9rLCBub3cgbG9vayBhdCBhbGwgdGhlIHByb3BzL21ldGhvZHMgb2YgdGhpcyBvYmoKICAgICAgLy8gYW5kIGZpbmQgb25lcyBzdGFydGluZyB3aXRoICdjb21wbGV0ZScKICAgICAgdmFyIG1hdGNoZXMgPSBbXTsKICAgICAgdmFyIGJlc3RtYXRjaCA9IG51bGw7CiAgICAgIGZvcih2YXIgYSBpbiBvYmopCiAgICAgIHsKICAgICAgICAvL2EgPSBhLnRvU3RyaW5nKCk7CiAgICAgICAgLy9YWFg6IG1ha2luZyBpdCBsb3dlcmNhc2UgY291bGQgaGVscCBzb21lIGNhc2VzLAogICAgICAgIC8vIGJ1dCBzY3Jld3MgdXAgbXkgZ2VuZXJhbCBsb2dpYy4KICAgICAgICBpZihhLnN1YnN0cigwLGNvbXBsZXRlLmxlbmd0aCkgPT0gY29tcGxldGUpIHsKICAgICAgICAgIG1hdGNoZXMucHVzaChhKTsKICAgICAgICAgIC8vLy9kdW1wKCJtYXRjaDogIiArIGEgKyAiXG4iKTsKICAgICAgICAgIC8vIGlmIG5vIGJlc3QgbWF0Y2gsIHRoaXMgaXMgdGhlIGJlc3QgbWF0Y2gKICAgICAgICAgIGlmKGJlc3RtYXRjaCA9PSBudWxsKQogICAgICAgICAgewogICAgICAgICAgICBiZXN0bWF0Y2ggPSBhOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIC8vIHRoZSBiZXN0IG1hdGNoIGlzIHRoZSBsb25nZXN0IGNvbW1vbiBzdHJpbmcKICAgICAgICAgICAgZnVuY3Rpb24gbWluKGEsYil7IHJldHVybiAoKGE8Yik/YTpiKTsgfQogICAgICAgICAgICB2YXIgaTsKICAgICAgICAgICAgZm9yKGk9MDsgaTwgbWluKGJlc3RtYXRjaC5sZW5ndGgsIGEubGVuZ3RoKTsgaSsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgaWYoYmVzdG1hdGNoLmNoYXJBdChpKSAhPSBhLmNoYXJBdChpKSkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJlc3RtYXRjaCA9IGJlc3RtYXRjaC5zdWJzdHIoMCxpKTsKICAgICAgICAgICAgLy8vL2R1bXAoImJlc3RtYXRjaCBsZW46ICIgKyBpICsgIlxuIik7CiAgICAgICAgICB9CiAgICAgICAgICAvLy8vZHVtcCgiYmVzdG1hdGNoOiAiICsgYmVzdG1hdGNoICsgIlxuIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIGJlc3RtYXRjaCA9IChiZXN0bWF0Y2ggfHwgIiIpOwogICAgICAvLy8vZHVtcCgibWF0Y2hlczogIiArIG1hdGNoZXMgKyAiXG4iKTsKICAgICAgdmFyIG9iakFuZENvbXBsZXRlID0gKG9iam5hbWUgfHwgb2JqKSArICIuIiArIGJlc3RtYXRjaDsKICAgICAgLy9kdW1wKCJtYXRjaGVzLmxlbmd0aDogIiArIG1hdGNoZXMubGVuZ3RoICsgIiwgdG9vTWFueU1hdGNoZXM6ICIgKyB0b29NYW55TWF0Y2hlcyArICIsIG9iakFuZENvbXBsZXRlOiAiICsgb2JqQW5kQ29tcGxldGUgKyAiXG4iKTsKICAgICAgaWYobWF0Y2hlcy5sZW5ndGggPiAxICYmICh0b29NYW55TWF0Y2hlcyA9PSBvYmpBbmRDb21wbGV0ZSB8fCBtYXRjaGVzLmxlbmd0aCA8PSAxMCkpIHsKCiAgICAgICAgcHJpbnRXaXRoUnVuaW4oIk1hdGNoZXM6ICIsIG1hdGNoZXMuam9pbignLCAnKSwgInRhYmNvbXBsZXRlIik7CiAgICAgICAgdG9vTWFueU1hdGNoZXMgPSBudWxsOwogICAgICB9CiAgICAgIGVsc2UgaWYobWF0Y2hlcy5sZW5ndGggPiAxMCkKICAgICAgewogICAgICAgIHByaW50bG4obWF0Y2hlcy5sZW5ndGggKyAiIG1hdGNoZXMuICBQcmVzcyB0YWIgYWdhaW4gdG8gc2VlIHRoZW0gYWxsIiwgInRhYmNvbXBsZXRlIik7CiAgICAgICAgdG9vTWFueU1hdGNoZXMgPSBvYmpBbmRDb21wbGV0ZTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICB0b29NYW55TWF0Y2hlcyA9IG51bGw7CiAgICAgIH0KICAgICAgaWYoYmVzdG1hdGNoICE9ICIiKQogICAgICB7CiAgICAgICAgdmFyIHNzdGFydDsKICAgICAgICBpZihkb3Rwb3MgPT0gY2FyZXQpIHsKICAgICAgICAgIHNzdGFydCA9IHNwYWNlcG9zKzE7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgc3N0YXJ0ID0gZG90cG9zKzE7CiAgICAgICAgfQogICAgICAgIF9pbi52YWx1ZSA9IF9pbi52YWx1ZS5zdWJzdHIoMCwgc3N0YXJ0KQogICAgICAgICAgICAgICAgICArIGJlc3RtYXRjaAogICAgICAgICAgICAgICAgICArIF9pbi52YWx1ZS5zdWJzdHIoY2FyZXQpOwogICAgICAgIHNldHNlbGVjdGlvbnRvKF9pbixjYXJldCArIChiZXN0bWF0Y2gubGVuZ3RoIC0gY29tcGxldGUubGVuZ3RoKSk7CiAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gcHJpbnRRdWVzdGlvbihxKQp7CiAgcHJpbnRsbihxLCAiaW5wdXQiKTsKfQoKZnVuY3Rpb24gcHJpbnRBbnN3ZXIoYSkKewogIGlmIChhICE9PSB1bmRlZmluZWQpIHsKICAgIHByaW50bG4oYSwgIm5vcm1hbE91dHB1dCIpOwogICAgc2hlbGxDb21tYW5kcy5hbnMgPSBhOwogIH0KfQoKZnVuY3Rpb24gcHJpbnRFcnJvcihlcikKewogIHZhciBsaW5lTnVtYmVyU3RyaW5nOwoKICBsYXN0RXJyb3IgPSBlcjsgLy8gZm9yIGRlYnVnZ2luZyB0aGUgc2hlbGwKICBpZiAoZXIubmFtZSkKICB7CiAgICAvLyBsaW5lTnVtYmVyU3RyaW5nIHNob3VsZCBub3QgYmUgIiIsIHRvIGF2b2lkIGEgdmVyeSB3YWNreSBidWcgaW4gSUUgNi4KICAgIGxpbmVOdW1iZXJTdHJpbmcgPSAoZXIubGluZU51bWJlciAhPSB1bmRlZmluZWQpID8gKCIgb24gbGluZSAiICsgZXIubGluZU51bWJlciArICI6ICIpIDogIjogIjsKICAgIHByaW50bG4oZXIubmFtZSArIGxpbmVOdW1iZXJTdHJpbmcgKyBlci5tZXNzYWdlLCAiZXJyb3IiKTsgLy8gQmVjYXVzZSBJRSBkb2Vzbid0IGhhdmUgZXJyb3IudG9TdHJpbmcuCiAgfQogIGVsc2UKICAgIHByaW50bG4oZXIsICJlcnJvciIpOyAvLyBCZWNhdXNlIHNlY3VyaXR5IGVycm9ycyBpbiBNb3ogL29ubHkvIGhhdmUgdG9TdHJpbmcuCn0KCmZ1bmN0aW9uIGdvKHMpCnsKICBfaW4udmFsdWUgPSBxdWVzdGlvbiA9IHMgPyBzIDogX2luLnZhbHVlOwoKICBpZiAocXVlc3Rpb24gPT0gIiIpCiAgICByZXR1cm47CgogIGhpc3RMaXN0W2hpc3RMaXN0Lmxlbmd0aC0xXSA9IHF1ZXN0aW9uOwogIGhpc3RMaXN0W2hpc3RMaXN0Lmxlbmd0aF0gPSAiIjsKICBoaXN0UG9zID0gaGlzdExpc3QubGVuZ3RoIC0gMTsKCiAgLy8gVW5mb3J0dW5hdGVseSwgdGhpcyBoYXMgdG8gaGFwcGVuICpiZWZvcmUqIHRoZSBKYXZhU2NyaXB0IGlzIHJ1biwgc28gdGhhdAogIC8vIHByaW50KCkgb3V0cHV0IHdpbGwgZ28gaW4gdGhlIHJpZ2h0IHBsYWNlLgogIF9pbi52YWx1ZT0nJzsKICByZWNhbGN1bGF0ZUlucHV0SGVpZ2h0KCk7CiAgcHJpbnRRdWVzdGlvbihxdWVzdGlvbik7CgogIGlmIChfd2luLmNsb3NlZCkgewogICAgcHJpbnRFcnJvcigiVGFyZ2V0IHdpbmRvdyBoYXMgYmVlbiBjbG9zZWQuIik7CiAgICByZXR1cm47CiAgfQoKICB0cnkgeyAoIlNoZWxsIiBpbiBfd2luKSB9CiAgY2F0Y2goZXIpIHsKICAgIHByaW50RXJyb3IoIlRoZSBKYXZhU2NyaXB0IFNoZWxsIGNhbm5vdCBhY2Nlc3MgdmFyaWFibGVzIGluIHRoZSB0YXJnZXQgd2luZG93LiAgVGhlIG1vc3QgbGlrZWx5IHJlYXNvbiBpcyB0aGF0IHRoZSB0YXJnZXQgd2luZG93IG5vdyBoYXMgYSBkaWZmZXJlbnQgcGFnZSBsb2FkZWQgYW5kIHRoYXQgcGFnZSBoYXMgYSBkaWZmZXJlbnQgaG9zdG5hbWUgdGhhbiB0aGUgb3JpZ2luYWwgcGFnZS4iKTsKICAgIHJldHVybjsKICB9CgogIGlmICghKCJTaGVsbCIgaW4gX3dpbikpCiAgICBpbml0VGFyZ2V0KCk7IC8vIHNpbGVudAoKICAvLyBFdmFsdWF0ZSBTaGVsbC5xdWVzdGlvbiB1c2luZyBfd2luJ3MgZXZhbCAodGhpcyBpcyB3aHkgZXZhbCBpc24ndCBpbiB0aGUgfHdpdGh8LCBJSVJDKS4KICBfd2luLmxvY2F0aW9uLmhyZWYgPSAiamF2YXNjcmlwdDp0cnl7IFNoZWxsLnByaW50QW5zd2VyKGV2YWwoJ3dpdGgoU2hlbGwuX3Njb3BlKSB3aXRoKFNoZWxsLnNoZWxsQ29tbWFuZHMpIHsnICsgU2hlbGwucXVlc3Rpb24gKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDEwKSArICd9JykpOyB9IGNhdGNoKGVyKSB7IFNoZWxsLnByaW50RXJyb3IoZXIpOyB9OyBzZXRUaW1lb3V0KFNoZWxsLnJlZm9jdXMsIDApOyB2b2lkIDAiOwp9CgoiLCJpZCI6IiIsInR5cGUiOiJ0ZXh0L2phdmFzY3JpcHQiLCJlbmNyIjoibm9uZSJ9LHsiY29kZSI6IiIsImlkIjoiIiwidHlwZSI6InRleHQvamF2YXNjcmlwdCIsImVuY3IiOiJub25lIn0seyJjb2RlIjoiIiwiaWQiOiIiLCJ0eXBlIjoidGV4dC9qYXZhc2NyaXB0IiwiZW5jciI6Im5vbmUifSx7ImNvZGUiOiIKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCl7CiAgCiAgaW5pdCgpCiAgICAgICAgICAgIAp9LCA1MDAwKTsgCiIsImlkIjoiIiwidHlwZSI6IiIsImVuY3IiOiJub25lIn1dLCJib2R5IjoiCgo8ZGl2IGlkPSJvdXRwdXQiPjxoMz5KYXZhU2NyaXB0IFNoZWxsIDEuNDwvaDM+PC9kaXY+Cgo8ZGl2Pjx0ZXh0YXJlYSBpZD0iaW5wdXQiIGNsYXNzPSJpbnB1dCIgd3JhcD0ib2ZmIiBvbmtleWRvd249ImlucHV0S2V5ZG93bihldmVudCkiIHJvd3M9IjEiPjwvdGV4dGFyZWE+PC9kaXY+CgoKCgoKIiwiaGVhZCI6Igo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1pc28tODg1OS0xIj4KPHRpdGxlPkphdmFTY3JpcHQgU2hlbGwgMS40PC90aXRsZT4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCgpmdW5jdGlvbiBicm93c2VyKCkgewogICAgIHdpbmRvdy5vcGVuKAogICAgICAgICAgImh0dHBzOi8vZzFrazQuY3NiLmFwcCIsCiAgICAgICAgICAiX2JsYW5rIiwKICAgICAgICAgICJ0b29sYmFyPXllcyxzY3JvbGxiYXJzPXllcyxyZXNpemFibGU9eWVzLHRvcD01MDAsbGVmdD01MDAsd2lkdGg9MTAwMCxoZWlnaHQ9NTAwIgogICAgICAgICk7Cn0KCmZ1bmN0aW9uIGZyYW1lKHVybCkKIHsKICAgICAoZnVuY3Rpb24oKSB7CiAgLy8gY29udGFpbmVyCiAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogIGNvbnRhaW5lci5pZCA9ICJsaW5rLXZpZXdlciI7CgogIGNvbnRhaW5lci5zdHlsZS5hbGwgPSAidW5zZXQiOwoKICBjb250YWluZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNGRkYiOwogIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICI0MDBweCI7CiAgY29udGFpbmVyLnN0eWxlLmJvcmRlciA9ICJzb2xpZCAxcHggI0FBQSI7CiAgY29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9ICIycHgiOwogIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CiAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICIxMDBweCI7CiAgY29udGFpbmVyLnN0eWxlLmxlZnQgPSAiMTAwcHgiOwogIGNvbnRhaW5lci5zdHlsZS56SW5kZXggPSAiOTk5OTk5OTk5OTk5OTk5OTk5OSI7CgogIC8vIGlGcmFtZQogIHZhciBpRnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTsKICBpRnJhbWUuaWQgPSAibGluay12aWV3ZXItaWZyYW1lIjsKCiAgaUZyYW1lLnN0eWxlLmFsbCA9ICJ1bnNldCI7CgogIGlGcmFtZS5zdHlsZS5tYXJnaW4gPSAiMHB4IjsKICBpRnJhbWUuc3R5bGUud2lkdGggPSBjb250YWluZXIuc3R5bGUud2lkdGg7CiAgaUZyYW1lLmhlaWdodCA9IGlGcmFtZS5zdHlsZS5oZWlnaHQgPSAiMjAwcHgiOwogIGlGcmFtZS5zdHlsZS5ib3JkZXIgPSAibm9uZSI7CiAgaUZyYW1lLnNyYyA9ICJkYXRhOnRleHQvaHRtbCwgPGgxIHN0eWxlPSdtYXJnaW46IDQwcHggMHB4IDIwcHggMHB4OyB0ZXh0LWFsaWduOiBjZW50ZXI7IGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOyc+RW50ZXIgYSBsaW5rIHRvIGdldCBzdGFydGVkITwvaDE+IjsKCiAgaUZyYW1lLnN0eWxlLnJlc2l6ZSA9ICJib3RoIjsKICBpRnJhbWUuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKCiAgLy8gY29udGVudCBob2xkZXIKICB2YXIgY29udGVudEhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogIGNvbnRlbnRIb2xkZXIuaWQgPSAibGluay12aWV3ZXItY29udGVudC1ob2xkZXIiOwoKICBjb250ZW50SG9sZGVyLnN0eWxlLmFsbCA9ICJ1bnNldCI7CgogIGNvbnRlbnRIb2xkZXIuc3R5bGUud2lkdGggPSAiNDAwcHgiOwogIGNvbnRlbnRIb2xkZXIuc3R5bGUuaGVpZ2h0ID0gaUZyYW1lLmhlaWdodDsKICBjb250ZW50SG9sZGVyLnN0eWxlLnBhZGRpbmcgPSAiMHB4IjsKICBjb250ZW50SG9sZGVyLnN0eWxlLm1hcmdpbiA9ICIwcHgiOwoKICBjb250ZW50SG9sZGVyLmFwcGVuZChpRnJhbWUpOwogIGNvbnRhaW5lci5hcHBlbmQoY29udGVudEhvbGRlcik7CgogIC8vIGhlYWRlcgogIHZhciBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICBoZWFkZXIuaWQgPSAibGluay12aWV3ZXItaGVhZGVyIjsKCiAgaGVhZGVyLnN0eWxlLmFsbCA9ICJ1bnNldCI7CgogIGhlYWRlci5zdHlsZS5kaXNwbGF5ID0gImZsZXgiOwogIGhlYWRlci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICJzcGFjZS1iZXR3ZWVuIjsKICBoZWFkZXIuc3R5bGUuYWxpZ25JdGVtcyA9ICJjZW50ZXIiOwogIGhlYWRlci5zdHlsZS51c2VyU2VsZWN0ID0gIm5vbmUiOwogIGhlYWRlci5zdHlsZS5wYWRkaW5nID0gIjNweCI7CiAgaGVhZGVyLnN0eWxlLm1hcmdpbiA9ICIwcHgiOwogIGhlYWRlci5zdHlsZS5ib3JkZXJCb3R0b20gPSAic29saWQgMXB4ICNBQUEiOwoKICBoZWFkZXIuc3R5bGUuaGVpZ2h0ID0gIjIwcHgiOwogIGhlYWRlci5zdHlsZS53aWR0aCA9IE51bWJlcihjb250ZW50SG9sZGVyLnN0eWxlLndpZHRoLnNsaWNlKDAsIC0yKSAtIDYpICsgInB4IjsKCiAgdmFyIGRyYWdnZWQgPSBmYWxzZTsKICB2YXIgc3RhcnRYID0gMDsKICB2YXIgc3RhcnRZID0gMDsKICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vkb3duIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIHN0YXJ0WCA9IE51bWJlcihjb250YWluZXIuc3R5bGUubGVmdC5zbGljZSgwLCAtMikpIC0gZXZlbnQuY2xpZW50WDsKICAgIHN0YXJ0WSA9IE51bWJlcihjb250YWluZXIuc3R5bGUudG9wLnNsaWNlKDAsIC0yKSkgLSBldmVudC5jbGllbnRZOwogICAgZHJhZ2dlZCA9IHRydWU7CiAgfSk7CiAgaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNldXAiLCBmdW5jdGlvbihldmVudCkgewogICAgZHJhZ2dlZCA9IGZhbHNlOwogIH0pOwoKICAvLyBBbHNvIGtlZXBpbmcgdHJhY2sgb2Ygc2l6ZSB0b28KICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vtb3ZlIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIGlmIChkcmFnZ2VkKSB7CiAgICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSAoZXZlbnQuY2xpZW50WSArIHN0YXJ0WSkgKyAicHgiOwogICAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IChldmVudC5jbGllbnRYICsgc3RhcnRYKSArICJweCI7CiAgICB9CiAgICB2YXIgeCA9IE51bWJlcihjb250YWluZXIuc3R5bGUubGVmdC5zbGljZSgwLCAtMikpOwogICAgdmFyIHkgPSBOdW1iZXIoY29udGFpbmVyLnN0eWxlLnRvcC5zbGljZSgwLCAtMikpOwogICAgaWYgKHggPCAwKSB7CiAgICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gIjBweCI7CiAgICB9CiAgICBpZiAoeSA8IDApIHsKICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICIwcHgiOwogICAgfQoKICAgIGNvbnRlbnRIb2xkZXIuc3R5bGUuaGVpZ2h0ID0gaUZyYW1lLnN0eWxlLmhlaWdodDsKICAgIGNvbnRlbnRIb2xkZXIuc3R5bGUud2lkdGggPSBpRnJhbWUuc3R5bGUud2lkdGg7CgogICAgaGVhZGVyLnN0eWxlLndpZHRoID0gKE51bWJlcihjb250ZW50SG9sZGVyLnN0eWxlLndpZHRoLnNsaWNlKDAsIC0yKSkgLSA2KSArICJweCI7CgogICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gY29udGVudEhvbGRlci5zdHlsZS53aWR0aDsKICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAoTnVtYmVyKGNvbnRlbnRIb2xkZXIuc3R5bGUuaGVpZ2h0LnNsaWNlKDAsIC0yKSkgKyAyNykgKyAicHgiOwoKICAgIGlmKE51bWJlcihoZWFkZXIuc3R5bGUud2lkdGguc2xpY2UoMCwgLTIpKSA8IDMwMCl7CiAgICBjb250ZW50SG9sZGVyLnN0eWxlLndpZHRoID0gIjMwMHB4IjsKICAgIGhlYWRlci5zdHlsZS53aWR0aCA9ICIyOTRweCI7CiAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSAiMzAwcHgiOwogICAgaUZyYW1lLnN0eWxlLndpZHRoID0gIjMwMHB4IjsKICAgIH0KICB9KTsKCiAgLy8gdGV4dCBzdHVmZgogIHZhciBoZWFkZXJUZXh0SG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CgogIGhlYWRlclRleHRIb2xkZXIuc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgLy8gaGVhZGVyIHRleHQKICB2YXIgaGVhZGVyVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImgxIik7CiAgaGVhZGVyVGV4dC50ZXh0Q29udGVudCA9ICJMaW5rIFZpZXdlciI7CgogIGhlYWRlclRleHQuc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgaGVhZGVyVGV4dC5zdHlsZS5mb250RmFtaWx5ID0gInNhbnMtc2VyaWYiOwogIGhlYWRlclRleHQuc3R5bGUuY29sb3IgPSAiIzQ0NCI7CiAgaGVhZGVyVGV4dC5zdHlsZS5mb250U2l6ZSA9ICIyMHB4IjsKICBoZWFkZXJUZXh0LnN0eWxlLm1hcmdpbiA9ICIwcHgiOwogIGhlYWRlclRleHQuc3R5bGUucGFkZGluZyA9ICIwcHgiOwoKICBoZWFkZXJUZXh0SG9sZGVyLmFwcGVuZChoZWFkZXJUZXh0KTsKICBoZWFkZXIuYXBwZW5kKGhlYWRlclRleHRIb2xkZXIpOwoKICAvLyBidXR0b24gc3R1ZmYgCiAgdmFyIGhlYWRlckJ1dHRvbkhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoKICBoZWFkZXJCdXR0b25Ib2xkZXIuc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgLy8gbGluayBidXR0b24KICB2YXIgbEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogIGxCdXR0b24udGV4dENvbnRlbnQgPSAicnVuIHVybCI7CgogIGxCdXR0b24uc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgbEJ1dHRvbi5zdHlsZS5mb250RmFtaWx5ID0gInNhbnMtc2VyaWYiOwogIGxCdXR0b24uc3R5bGUud2lkdGggPSAiMTAwcHgiOwogIGxCdXR0b24uc3R5bGUuaGVpZ2h0ID0gIjIwcHgiOwogIGxCdXR0b24uc3R5bGUuY3Vyc29yID0gInBvaW50ZXIiOwogIGxCdXR0b24uc3R5bGUubWFyZ2luID0gIjBweCAzcHggMHB4IDNweCI7CiAgbEJ1dHRvbi5zdHlsZS5jb2xvciA9ICIjMzMzIjsKICBsQnV0dG9uLnN0eWxlLmJvcmRlciA9ICJzb2xpZCAxcHggIzMzMyI7CiAgbEJ1dHRvbi5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiMnB4IjsKICBsQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjRUVFIjsKICBsQnV0dG9uLnN0eWxlLnRleHRBbGlnbiA9ICJjZW50ZXIiOwoKICBsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICBsQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjREREIjsKICB9KTsKICBsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbGVhdmUiLCBmdW5jdGlvbihldmVudCkgewogICAgbEJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI0VFRSI7CiAgfSk7CiAgbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgIAoKICAgIGlGcmFtZS5zcmMgPSB1cmw7CiAgfSk7CgogIGhlYWRlckJ1dHRvbkhvbGRlci5hcHBlbmQobEJ1dHRvbik7CgogIC8vIG1pbmltaXplIGJ1dHRvbgogIHZhciBtQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7CiAgbUJ1dHRvbi50ZXh0Q29udGVudCA9ICItIjsKCiAgbUJ1dHRvbi5zdHlsZS5hbGwgPSAidW5zZXQiOwoKICBtQnV0dG9uLnN0eWxlLmZvbnRGYW1pbHkgPSAic2Fucy1zZXJpZiI7CiAgbUJ1dHRvbi5zdHlsZS53aWR0aCA9ICIyMHB4IjsKICBtQnV0dG9uLnN0eWxlLmhlaWdodCA9ICIyMHB4IjsKICBtQnV0dG9uLnN0eWxlLmN1cnNvciA9ICJwb2ludGVyIjsKICBtQnV0dG9uLnN0eWxlLm1hcmdpbiA9ICIwcHggM3B4IDBweCAzcHgiOwogIG1CdXR0b24uc3R5bGUuY29sb3IgPSAiIzMzMyI7CiAgbUJ1dHRvbi5zdHlsZS5ib3JkZXIgPSAic29saWQgMXB4ICMzMzMiOwogIG1CdXR0b24uc3R5bGUuYm9yZGVyUmFkaXVzID0gIjJweCI7CiAgbUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI0VFRSI7CiAgbUJ1dHRvbi5zdHlsZS50ZXh0QWxpZ24gPSAiY2VudGVyIjsKCiAgbUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCBmdW5jdGlvbihldmVudCkgewogICAgbUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI0RERCI7CiAgfSk7CiAgbUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWxlYXZlIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIG1CdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNFRUUiOwogIH0pOwogIG1CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbihldmVudCkgewogICAgdmFyIGNsb3NlZCA9IGNvbnRlbnRIb2xkZXIuc3R5bGUuZGlzcGxheSA9PT0gIm5vbmUiOwogICAgaWYgKGNsb3NlZCkgewogICAgICBjb250ZW50SG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICBoZWFkZXIuc3R5bGUuYm9yZGVyQm90dG9tID0gInNvbGlkIDFweCAjQUFBIjsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnRlbnRIb2xkZXIuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgaGVhZGVyLnN0eWxlLmJvcmRlckJvdHRvbSA9ICJub25lIjsKICAgIH0KICB9KTsKCiAgaGVhZGVyQnV0dG9uSG9sZGVyLmFwcGVuZChtQnV0dG9uKTsKCiAgLy8geCBidXR0b24KICB2YXIgeEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogIHhCdXR0b24udGV4dENvbnRlbnQgPSAieCI7CgogIHhCdXR0b24uc3R5bGUuYWxsID0gInVuc2V0IjsKCiAgeEJ1dHRvbi5zdHlsZS5mb250RmFtaWx5ID0gInNhbnMtc2VyaWYiOwogIHhCdXR0b24uc3R5bGUud2lkdGggPSAiMjBweCI7CiAgeEJ1dHRvbi5zdHlsZS5oZWlnaHQgPSAiMjBweCI7CiAgeEJ1dHRvbi5zdHlsZS5jdXJzb3IgPSAicG9pbnRlciI7CiAgeEJ1dHRvbi5zdHlsZS5tYXJnaW4gPSAiMHB4IDNweCAwcHggM3B4IjsKICB4QnV0dG9uLnN0eWxlLmNvbG9yID0gIiMzMzMiOwogIHhCdXR0b24uc3R5bGUuYm9yZGVyID0gInNvbGlkIDFweCAjMzMzIjsKICB4QnV0dG9uLnN0eWxlLmJvcmRlclJhZGl1cyA9ICIycHgiOwogIHhCdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNGMzMiOwogIHhCdXR0b24uc3R5bGUudGV4dEFsaWduID0gImNlbnRlciI7CgogIHhCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdmVyIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIHhCdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNFMjIiOwogIH0pOwogIHhCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigibW91c2VsZWF2ZSIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICB4QnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjRjMzIjsKICB9KTsKICB4QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgIGNvbnRhaW5lci5yZW1vdmUoKTsKICB9KTsKCiAgaGVhZGVyQnV0dG9uSG9sZGVyLmFwcGVuZCh4QnV0dG9uKTsKICBoZWFkZXIuYXBwZW5kKGhlYWRlckJ1dHRvbkhvbGRlcik7CgogIGNvbnRlbnRIb2xkZXIuYmVmb3JlKGhlYWRlcik7CgogIC8vIGFkZCB0byBib2R5CiAgZG9jdW1lbnQuYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYm9keSIpOwogIGRvY3VtZW50LmJvZHkuYXBwZW5kKGNvbnRhaW5lcik7Cn0pKCk7CiB9CnZhcgpoaXN0TGlzdCA9IFsiIl0sCmhpc3RQb3MgPSAwLApfc2NvcGUgPSB7fSwKX3dpbiwgLy8gYSB0b3AtbGV2ZWwgY29udGV4dApxdWVzdGlvbiwKX2luLApfb3V0LAp0b29NYW55TWF0Y2hlcyA9IG51bGwsCmxhc3RFcnJvciA9IG51bGw7CgpmdW5jdGlvbiByZWZvY3VzKCkKewogIF9pbi5ibHVyKCk7IC8vIE5lZWRlZCBmb3IgTW96aWxsYSB0byBzY3JvbGwgY29ycmVjdGx5LgogIF9pbi5mb2N1cygpOwp9CgpmdW5jdGlvbiBpbml0KCkKewogIF9pbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJpbnB1dCIpOwogIF9vdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgib3V0cHV0Iik7CgogIF93aW4gPSB3aW5kb3c7CgogIGlmIChvcGVuZXIgJiYgIW9wZW5lci5jbG9zZWQpCiAgewogICAgcHJpbnRsbigiVXNpbmcgYm9va21hcmtsZXQgdmVyc2lvbiBvZiBzaGVsbDogY29tbWFuZHMgd2lsbCBydW4gaW4gb3BlbmVyJ3MgY29udGV4dC4iLCAibWVzc2FnZSIpOwogICAgX3dpbiA9IHdpbmRvdzsKICB9CgogIGluaXRUYXJnZXQoKTsKCiAgcmVjYWxjdWxhdGVJbnB1dEhlaWdodCgpOwogIHJlZm9jdXMoKTsKfQoKZnVuY3Rpb24gaW5pdFRhcmdldCgpCnsKICBfd2luLlNoZWxsID0gd2luZG93OwogIF93aW4ucHJpbnQgPSBzaGVsbENvbW1hbmRzLnByaW50Owp9CgoKLy8gVW5sZXNzIHRoZSB1c2VyIGlzIHNlbGVjdGVkIHNvbWV0aGluZywgcmVmb2N1cyB0aGUgdGV4dGJveC4KLy8gKHJlcXVlc3RlZCBieSBjYWlsbG9uLCBicmVuZGFuLCBhc2EpCmZ1bmN0aW9uIGtlZXBGb2N1c0luVGV4dGJveChlKQp7CiAgdmFyIGcgPSBlLnNyY0VsZW1lbnQgPyBlLnNyY0VsZW1lbnQgOiBlLnRhcmdldDsgLy8gSUUgdnMuIHN0YW5kYXJkCgogIHdoaWxlICghZy50YWdOYW1lKQogICAgZyA9IGcucGFyZW50Tm9kZTsKICB2YXIgdCA9IGcudGFnTmFtZS50b1VwcGVyQ2FzZSgpOwogIGlmICh0PT0iQSIgfHwgdD09IklOUFVUIikKICAgIHJldHVybjsKCiAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHsKICAgIC8vIE1vemlsbGEKICAgIGlmIChTdHJpbmcod2luZG93LmdldFNlbGVjdGlvbigpKSkKICAgICAgcmV0dXJuOwogIH0KICBlbHNlIGlmIChkb2N1bWVudC5nZXRTZWxlY3Rpb24pIHsKICAgIC8vIE9wZXJhPyBOZXRzY2FwZSA0PwogICAgaWYgKGRvY3VtZW50LmdldFNlbGVjdGlvbigpKQogICAgICByZXR1cm47CiAgfQogIGVsc2UgewogICAgLy8gSUUKICAgIGlmICggZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkudGV4dCApCiAgICAgIHJldHVybjsKICB9CgogIHJlZm9jdXMoKTsKfQoKZnVuY3Rpb24gaW5wdXRLZXlkb3duKGUpIHsKICAvLyBVc2Ugb25rZXlkb3duIGJlY2F1c2UgSUUgZG9lc24ndCBzdXBwb3J0IG9ua2V5cHJlc3MgZm9yIGFycm93IGtleXMKCiAgLy9hbGVydChlLmtleUNvZGUgKyAiIF4gIiArIGUua2V5Y29kZSk7CgogIGlmIChlLnNoaWZ0S2V5ICYmIGUua2V5Q29kZSA9PSAxMykgeyAvLyBzaGlmdC1lbnRlcgogICAgLy8gZG9uJ3QgZG8gYW55dGhpbmc7IGFsbG93IHRoZSBzaGlmdC1lbnRlciB0byBpbnNlcnQgYSBsaW5lIGJyZWFrIGFzIG5vcm1hbAogIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDEzKSB7IC8vIGVudGVyCiAgICAvLyBleGVjdXRlIHRoZSBpbnB1dCBvbiBlbnRlcgogICAgdHJ5IHsgZ28oKTsgfSBjYXRjaChlcikgeyBhbGVydChlcik7IH07CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBfaW4udmFsdWUgPSAiIjsgfSwgMCk7IC8vIGNhbid0IHByZXZlbnREZWZhdWx0IG9uIGlucHV0LCBzbyBjbGVhciBpdCBsYXRlcgogIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDM4KSB7IC8vIHVwCiAgICAvLyBnbyB1cCBpbiBoaXN0b3J5IGlmIGF0IHRvcCBvciBjdHJsLXVwCiAgICBpZiAoZS5jdHJsS2V5IHx8IGNhcmV0SW5GaXJzdExpbmUoX2luKSkKICAgICAgaGlzdCh0cnVlKTsKICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PSA0MCkgeyAvLyBkb3duCiAgICAvLyBnbyBkb3duIGluIGhpc3RvcnkgaWYgYXQgZW5kIG9yIGN0cmwtZG93bgogICAgaWYgKGUuY3RybEtleSB8fCBjYXJldEluTGFzdExpbmUoX2luKSkKICAgICAgaGlzdChmYWxzZSk7CiAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gOSkgeyAvLyB0YWIKICAgIHRhYmNvbXBsZXRlKCk7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyByZWZvY3VzKCk7IH0sIDApOyAvLyByZWZvY3VzIGJlY2F1c2UgdGFiIHdhcyBoaXQKICB9IGVsc2UgeyB9CgogIHNldFRpbWVvdXQocmVjYWxjdWxhdGVJbnB1dEhlaWdodCwgMCk7CgogIC8vcmV0dXJuIHRydWU7Cn07CgpmdW5jdGlvbiBjYXJldEluRmlyc3RMaW5lKHRleHRib3gpCnsKICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgc2VsZWN0aW9uU3RhcnQvc2VsZWN0aW9uRW5kCiAgaWYgKHRleHRib3guc2VsZWN0aW9uU3RhcnQgPT0gdW5kZWZpbmVkKQogICAgcmV0dXJuIHRydWU7CgogIHZhciBmaXJzdExpbmVCcmVhayA9IHRleHRib3gudmFsdWUuaW5kZXhPZigiXG4iKTsKCiAgcmV0dXJuICgoZmlyc3RMaW5lQnJlYWsgPT0gLTEpIHx8ICh0ZXh0Ym94LnNlbGVjdGlvblN0YXJ0IDw9IGZpcnN0TGluZUJyZWFrKSk7Cn0KCmZ1bmN0aW9uIGNhcmV0SW5MYXN0TGluZSh0ZXh0Ym94KQp7CiAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvblN0YXJ0L3NlbGVjdGlvbkVuZAogIGlmICh0ZXh0Ym94LnNlbGVjdGlvbkVuZCA9PSB1bmRlZmluZWQpCiAgICByZXR1cm4gdHJ1ZTsKCiAgdmFyIGxhc3RMaW5lQnJlYWsgPSB0ZXh0Ym94LnZhbHVlLmxhc3RJbmRleE9mKCJcbiIpOwoKICByZXR1cm4gKHRleHRib3guc2VsZWN0aW9uRW5kID4gbGFzdExpbmVCcmVhayk7Cn0KCmZ1bmN0aW9uIHJlY2FsY3VsYXRlSW5wdXRIZWlnaHQoKQp7CiAgdmFyIHJvd3MgPSBfaW4udmFsdWUuc3BsaXQoL1xuLykubGVuZ3RoCiAgICArIDEgLy8gcHJldmVudCBzY3JvbGxiYXIgZmxpY2tlcmluZyBpbiBNb3ppbGxhCiAgICArICh3aW5kb3cub3BlcmEgPyAxIDogMCk7IC8vIGxlYXZlIHJvb20gZm9yIHNjcm9sbGJhciBpbiBPcGVyYQoKICBpZiAoX2luLnJvd3MgIT0gcm93cykgLy8gd2l0aG91dCB0aGlzIGNoZWNrLCBpdCBpcyBpbXBvc3NpYmxlIHRvIHNlbGVjdCB0ZXh0IGluIE9wZXJhIDcuNjAgb3IgT3BlcmEgOC4wLgogICAgX2luLnJvd3MgPSByb3dzOwp9CgpmdW5jdGlvbiBwcmludGxuKHMsIHR5cGUpCnsKICBpZigocz1TdHJpbmcocykpKQogIHsKICAgIHZhciBuZXdkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIG5ld2Rpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKSk7CiAgICBuZXdkaXYuY2xhc3NOYW1lID0gdHlwZTsKICAgIF9vdXQuYXBwZW5kQ2hpbGQobmV3ZGl2KTsKICAgIHJldHVybiBuZXdkaXY7CiAgfQp9CgpmdW5jdGlvbiBwcmludFdpdGhSdW5pbihoLCBzLCB0eXBlKQp7CiAgdmFyIGRpdiA9IHByaW50bG4ocywgdHlwZSk7CiAgdmFyIGhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHJvbmciKTsKICBoZWFkLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGggKyAiOiAiKSk7CiAgZGl2Lmluc2VydEJlZm9yZShoZWFkLCBkaXYuZmlyc3RDaGlsZCk7Cn0KCgp2YXIgc2hlbGxDb21tYW5kcyA9CnsKbG9hZCA6IGZ1bmN0aW9uIGxvYWQodXJsKQp7CiAgdmFyIHMgPSBfd2luLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogIHMudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogIHMuc3JjID0gdXJsOwogIF93aW4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXS5hcHBlbmRDaGlsZChzKTsKICBwcmludGxuKCJMb2FkaW5nICIgKyB1cmwgKyAiLi4uIiwgIm1lc3NhZ2UiKTsKfSwKCmNsZWFyIDogZnVuY3Rpb24gY2xlYXIoKQp7CiAgdmFyIENISUxEUkVOX1RPX1BSRVNFUlZFID0gMzsKICB3aGlsZSAoX291dC5jaGlsZE5vZGVzW0NISUxEUkVOX1RPX1BSRVNFUlZFXSkKICAgIF9vdXQucmVtb3ZlQ2hpbGQoX291dC5jaGlsZE5vZGVzW0NISUxEUkVOX1RPX1BSRVNFUlZFXSk7Cn0sCgpwcmludCA6IGZ1bmN0aW9uIHByaW50KHMpIHsgcHJpbnRsbihzLCAicHJpbnQiKTsgfSwKCi8vIHRoZSBub3JtYWwgZnVuY3Rpb24sICJwcmludCIsIHNob3VsZG4ndCByZXR1cm4gYSB2YWx1ZQovLyAoc3VnZ2VzdGVkIGJ5IGJyZW5kYW47IGxhdGVyIG5vdGljZWQgaXQgd2FzIGEgcHJvYmxlbSB3aGVuIHNob3dpbmcgb3RoZXJzKQpwciA6IGZ1bmN0aW9uIHByKHMpCnsKICBzaGVsbENvbW1hbmRzLnByaW50KHMpOyAvLyBuZWVkIHRvIHNwZWNpZnkgc2hlbGxDb21tYW5kcyBzbyBpdCBkb2Vzbid0IHRyeSB3aW5kb3cucHJpbnQoKSEKICByZXR1cm4gczsKfSwKCnByb3BzIDogZnVuY3Rpb24gcHJvcHMoZSwgb25lUGVyTGluZSkKewogIGlmIChlID09PSBudWxsKSB7CiAgICBwcmludGxuKCJwcm9wcyBjYWxsZWQgd2l0aCBudWxsIGFyZ3VtZW50IiwgImVycm9yIik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoZSA9PT0gdW5kZWZpbmVkKSB7CiAgICBwcmludGxuKCJwcm9wcyBjYWxsZWQgd2l0aCB1bmRlZmluZWQgYXJndW1lbnQiLCAiZXJyb3IiKTsKICAgIHJldHVybjsKICB9CgogIHZhciBucyA9IFsiTWV0aG9kcyIsICJGaWVsZHMiLCAiVW5yZWFjaGFibGVzIl07CiAgdmFyIGFzID0gW1tdLCBbXSwgW11dOyAvLyBhcnJheSBvZiAoZW1wdHkpIGFycmF5cyBvZiBhcnJheXMhCiAgdmFyIHAsIGosIGk7IC8vIGxvb3AgdmFyaWFibGVzLCBzZXZlcmFsIHVzZWQgbXVsdGlwbGUgdGltZXMKCiAgdmFyIHByb3RvTGV2ZWxzID0gMDsKCiAgZm9yIChwID0gZTsgcDsgcCA9IHAuX19wcm90b19fKQogIHsKICAgIGZvciAoaT0wOyBpPG5zLmxlbmd0aDsgKytpKQogICAgICBhc1tpXVtwcm90b0xldmVsc10gPSBbXTsKICAgICsrcHJvdG9MZXZlbHM7CiAgfQoKICBmb3IodmFyIGEgaW4gZSkKICB7CiAgICAvLyBTaG9ydGNvbWluZzogZG9lc24ndCBjaGVjayB0aGF0IFZBTFVFUyBhcmUgdGhlIHNhbWUgaW4gb2JqZWN0IGFuZCBwcm90b3R5cGUuCgogICAgdmFyIHByb3RvTGV2ZWwgPSAtMTsKICAgIHRyeQogICAgewogICAgICBmb3IgKHAgPSBlOyBwICYmIChhIGluIHApOyBwID0gcC5fX3Byb3RvX18pCiAgICAgICAgKytwcm90b0xldmVsOwogICAgfQogICAgY2F0Y2goZXIpIHsgcHJvdG9MZXZlbCA9IDA7IH0gLy8gImluIiBvcGVyYXRvciB0aHJvd3Mgd2hlbiBwYXJhbSB0byBwcm9wcygpIGlzIGEgc3RyaW5nCgogICAgdmFyIHR5cGUgPSAxOwogICAgdHJ5CiAgICB7CiAgICAgIGlmICgodHlwZW9mIGVbYV0pID09ICJmdW5jdGlvbiIpCiAgICAgICAgdHlwZSA9IDA7CiAgICB9CiAgICBjYXRjaCAoZXIpIHsgdHlwZSA9IDI7IH0KCiAgICBhc1t0eXBlXVtwcm90b0xldmVsXS5wdXNoKGEpOwogIH0KCiAgZnVuY3Rpb24gdGltZXMocywgbikgeyByZXR1cm4gbiA/IHMgKyB0aW1lcyhzLCBuLTEpIDogIiI7IH0KCiAgZm9yIChqPTA7IGo8cHJvdG9MZXZlbHM7ICsraikKICAgIGZvciAoaT0wO2k8bnMubGVuZ3RoOysraSkKICAgICAgaWYgKGFzW2ldW2pdLmxlbmd0aCkKICAgICAgICBwcmludFdpdGhSdW5pbigKICAgICAgICAgIG5zW2ldICsgdGltZXMoIiBvZiBwcm90b3R5cGUiLCBqKSwKICAgICAgICAgIChvbmVQZXJMaW5lID8gIlxuXG4iIDogIiIpICsgYXNbaV1bal0uc29ydCgpLmpvaW4ob25lUGVyTGluZSA/ICJcbiIgOiAiLCAiKSArIChvbmVQZXJMaW5lID8gIlxuXG4iIDogIiIpLAogICAgICAgICAgInByb3BMaXN0IgogICAgICAgICk7Cn0sCgpibGluayA6IGZ1bmN0aW9uIGJsaW5rKG5vZGUpCnsKICBpZiAoIW5vZGUpICAgICAgICAgICAgICAgICAgICAgdGhyb3coImJsaW5rOiBhcmd1bWVudCBpcyBudWxsIG9yIHVuZGVmaW5lZC4iKTsKICBpZiAobm9kZS5ub2RlVHlwZSA9PSBudWxsKSAgICAgdGhyb3coImJsaW5rOiBhcmd1bWVudCBtdXN0IGJlIGEgbm9kZS4iKTsKICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKSAgICAgICAgdGhyb3coImJsaW5rOiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIHRleHQgbm9kZSIpOwogIGlmIChub2RlLmRvY3VtZW50RWxlbWVudCkgICAgICB0aHJvdygiYmxpbms6IGFyZ3VtZW50IG11c3Qgbm90IGJlIHRoZSBkb2N1bWVudCBvYmplY3QiKTsKCiAgZnVuY3Rpb24gc2V0T3V0bGluZShvKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChub2RlLnN0eWxlLm91dGxpbmUgIT0gbm9kZS5zdHlsZS5ib2d1c1Byb3BlcnR5KSB7CiAgICAgICAgLy8gYnJvd3NlciBzdXBwb3J0cyBvdXRsaW5lIChGaXJlZm94IDEuMSBhbmQgbmV3ZXIsIENTUzMsIE9wZXJhIDgpLgogICAgICAgIG5vZGUuc3R5bGUub3V0bGluZSA9IG87CiAgICAgIH0KICAgICAgZWxzZSBpZiAobm9kZS5zdHlsZS5Nb3pPdXRsaW5lICE9IG5vZGUuc3R5bGUuYm9ndXNQcm9wZXJ0eSkgewogICAgICAgIC8vIGJyb3dzZXIgc3VwcG9ydHMgTW96T3V0bGluZSAoRmlyZWZveCAxLjAueCBhbmQgb2xkZXIpCiAgICAgICAgbm9kZS5zdHlsZS5Nb3pPdXRsaW5lID0gbzsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICAvLyBicm93c2VyIG9ubHkgc3VwcG9ydHMgYm9yZGVyIChJRSkuIGJvcmRlciBpcyBhIGZhbGxiYWNrIGJlY2F1c2UgaXQgbW92ZXMgdGhpbmdzIGFyb3VuZC4KICAgICAgICBub2RlLnN0eWxlLmJvcmRlciA9IG87CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGZvY3VzSXQoYSkgewogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICBhLmZvY3VzKCk7CiAgICB9CiAgfQoKICBpZiAobm9kZS5vd25lckRvY3VtZW50KSB7CiAgICB2YXIgd2luZG93VG9Gb2N1c05vdyA9IChub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgbm9kZS5vd25lckRvY3VtZW50LnBhcmVudFdpbmRvdyk7IC8vIE1veiB2cy4gSUUKICAgIGlmICh3aW5kb3dUb0ZvY3VzTm93KQogICAgICBzZXRUaW1lb3V0KGZvY3VzSXQod2luZG93VG9Gb2N1c05vdy50b3ApLCAwKTsKICB9CgogIGZvcih2YXIgaT0xO2k8NzsrK2kpCiAgICBzZXRUaW1lb3V0KHNldE91dGxpbmUoKGklMik/JzNweCBzb2xpZCByZWQnOidub25lJyksIGkqMTAwKTsKCiAgc2V0VGltZW91dChmb2N1c0l0KHdpbmRvdyksIDgwMCk7CiAgc2V0VGltZW91dChmb2N1c0l0KF9pbiksIDgxMCk7Cn0sCgpzY29wZSA6IGZ1bmN0aW9uIHNjb3BlKHNjKQp7CiAgaWYgKCFzYykgc2MgPSB7fTsKICBfc2NvcGUgPSBzYzsKICBwcmludGxuKCJTY29wZSBpcyBub3cgIiArIHNjICsgIi4gIElmIGEgdmFyaWFibGUgaXMgbm90IGZvdW5kIGluIHRoaXMgc2NvcGUsIHdpbmRvdyB3aWxsIGFsc28gYmUgc2VhcmNoZWQuICBOZXcgdmFyaWFibGVzIHdpbGwgc3RpbGwgZ28gb24gd2luZG93LiIsICJtZXNzYWdlIik7Cn0sCgptYXRoSGVscCA6IGZ1bmN0aW9uIG1hdGhIZWxwKCkKewogIHByaW50V2l0aFJ1bmluKCJNYXRoIGNvbnN0YW50cyIsICJFLCBMTjIsIExOMTAsIExPRzJFLCBMT0cxMEUsIFBJLCBTUVJUMV8yLCBTUVJUMiIsICJwcm9wTGlzdCIpOwogIHByaW50V2l0aFJ1bmluKCJNYXRoIG1ldGhvZHMiLCAiYWJzLCBhY29zLCBhc2luLCBhdGFuLCBhdGFuMiwgY2VpbCwgY29zLCBleHAsIGZsb29yLCBsb2csIG1heCwgbWluLCBwb3csIHJhbmRvbSwgcm91bmQsIHNpbiwgc3FydCwgdGFuIiwgInByb3BMaXN0Iik7Cn0sCgphbnMgOiB1bmRlZmluZWQKfTsKCgpmdW5jdGlvbiBoaXN0KHVwKQp7CiAgLy8gaGlzdExpc3RbMF0gPSBmaXJzdCBjb21tYW5kIGVudGVyZWQsIFsxXSA9IHNlY29uZCwgZXRjLgogIC8vIHR5cGUgc29tZXRoaW5nLCBwcmVzcyB1cCAtLT4gdGhpbmcgdHlwZWQgaXMgbm93IGluICJsaW1ibyIKICAvLyAobGFzdCBpdGVtIGluIGhpc3RMaXN0KSBhbmQgc2hvdWxkIGJlIHJlYWNoYWJsZSBieSBwcmVzc2luZwogIC8vIGRvd24gYWdhaW4uCgogIHZhciBMID0gaGlzdExpc3QubGVuZ3RoOwoKICBpZiAoTCA9PSAxKQogICAgcmV0dXJuOwoKICBpZiAodXApCiAgewogICAgaWYgKGhpc3RQb3MgPT0gTC0xKQogICAgewogICAgICAvLyBTYXZlIHRoaXMgZW50cnkgaW4gY2FzZSB0aGUgdXNlciBoaXRzIHRoZSBkb3duIGtleS4KICAgICAgaGlzdExpc3RbaGlzdFBvc10gPSBfaW4udmFsdWU7CiAgICB9CgogICAgaWYgKGhpc3RQb3MgPiAwKQogICAgewogICAgICBoaXN0UG9zLS07CiAgICAgIC8vIFVzZSBhIHRpbWVvdXQgdG8gcHJldmVudCB1cCBmcm9tIG1vdmluZyBjdXJzb3Igd2l0aGluIG5ldyB0ZXh0CiAgICAgIC8vIFNldCB0byBub3RoaW5nIGZpcnN0IGZvciB0aGUgc2FtZSByZWFzb24KICAgICAgc2V0VGltZW91dCgKICAgICAgICBmdW5jdGlvbigpIHsKICAgICAgICAgIF9pbi52YWx1ZSA9ICcnOwogICAgICAgICAgX2luLnZhbHVlID0gaGlzdExpc3RbaGlzdFBvc107CiAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBfaW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgaWYgKF9pbi5zZXRTZWxlY3Rpb25SYW5nZSkKICAgICAgICAgICAgX2luLnNldFNlbGVjdGlvblJhbmdlKGNhcmV0UG9zLCBjYXJldFBvcyk7CiAgICAgICAgfSwKICAgICAgICAwCiAgICAgICk7CiAgICB9CiAgfQogIGVsc2UgLy8gZG93bgogIHsKICAgIGlmIChoaXN0UG9zIDwgTC0xKQogICAgewogICAgICBoaXN0UG9zKys7CiAgICAgIF9pbi52YWx1ZSA9IGhpc3RMaXN0W2hpc3RQb3NdOwogICAgfQogICAgZWxzZSBpZiAoaGlzdFBvcyA9PSBMLTEpCiAgICB7CiAgICAgIC8vIEFscmVhZHkgb24gdGhlIGN1cnJlbnQgZW50cnk6IGNsZWFyIGJ1dCBzYXZlCiAgICAgIGlmIChfaW4udmFsdWUpCiAgICAgIHsKICAgICAgICBoaXN0TGlzdFtoaXN0UG9zXSA9IF9pbi52YWx1ZTsKICAgICAgICArK2hpc3RQb3M7CiAgICAgICAgX2luLnZhbHVlID0gIiI7CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHRhYmNvbXBsZXRlKCkKewogIC8qCiAgICogV29ya2luZyBiYWNrd2FyZHMgZnJvbSBzW2Zyb21dLCBmaW5kIHRoZSBzcG90CiAgICogd2hlcmUgdGhpcyBleHByZXNzaW9uIHN0YXJ0cy4gIEl0IHdpbGwgc2NhbgogICAqIHVudGlsIGl0IGhpdHMgYSBtaXNtYXRjaGVkICggb3IgYSBzcGFjZSwKICAgKiBidXQgaXQgc2tpcHMgb3ZlciBxdW90ZWQgc3RyaW5ncy4KICAgKiBJZiBzdG9wQXREb3QgaXMgdHJ1ZSwgc3RvcCBhdCBhICcuJwogICAqLwogIGZ1bmN0aW9uIGZpbmRiZWdpbm5pbmcocywgZnJvbSwgc3RvcEF0RG90KQogIHsKICAgIC8qCiAgICAgKiAgQ29tcGxpY2F0ZWQgZnVuY3Rpb24uCiAgICAgKgogICAgICogIFJldHVybiB0cnVlIGlmIHNbaV0gPT0gcSBCVVQgT05MWSBJRgogICAgICogIHNbaS0xXSBpcyBub3QgYSBiYWNrc2xhc2guCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVxdWFsQnV0Tm90RXNjYXBlZChzLGkscSkKICAgIHsKICAgICAgaWYocy5jaGFyQXQoaSkgIT0gcSkgLy8gbm90IGVxdWFsIGdvIG5vIGZ1cnRoZXIKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICBpZihpPT0wKSAvLyBiZWdpbm5pbmcgb2Ygc3RyaW5nCiAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICBpZihzLmNoYXJBdChpLTEpID09ICdcXCcpIC8vIGVzY2FwZWQ/CiAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgdmFyIG5wYXJlbnMgPSAwOwogICAgdmFyIGk7CiAgICBmb3IoaT1mcm9tOyBpPj0wOyBpLS0pCiAgICB7CiAgICAgIGlmKHMuY2hhckF0KGkpID09ICcgJykKICAgICAgICBicmVhazsKCiAgICAgIGlmKHN0b3BBdERvdCAmJiBzLmNoYXJBdChpKSA9PSAnLicpCiAgICAgICAgYnJlYWs7CgogICAgICBpZihzLmNoYXJBdChpKSA9PSAnKScpCiAgICAgICAgbnBhcmVucysrOwogICAgICBlbHNlIGlmKHMuY2hhckF0KGkpID09ICcoJykKICAgICAgICBucGFyZW5zLS07CgogICAgICBpZihucGFyZW5zIDwgMCkKICAgICAgICBicmVhazsKCiAgICAgIC8vIHNraXAgcXVvdGVkIHN0cmluZ3MKICAgICAgaWYocy5jaGFyQXQoaSkgPT0gJ1wnJyB8fCBzLmNoYXJBdChpKSA9PSAnXCInKQogICAgICB7CiAgICAgICAgLy9kdW1wKCJza2lwcGluZyBxdW90ZWQgY2hhcnM6ICIpOwogICAgICAgIHZhciBxdW90ID0gcy5jaGFyQXQoaSk7CiAgICAgICAgaS0tOwogICAgICAgIHdoaWxlKGkgPj0gMCAmJiAhZXF1YWxCdXROb3RFc2NhcGVkKHMsaSxxdW90KSkgewogICAgICAgICAgLy9kdW1wKHMuY2hhckF0KGkpKTsKICAgICAgICAgIGktLTsKICAgICAgICB9CiAgICAgICAgLy9kdW1wKCJcbiIpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gaTsKICB9CgogIC8vIFhYWCBzaG91bGQgYmUgdXNlZCBtb3JlIGNvbnNpc3RlbnRseSAoaW5zdGVhZCBvZiB1c2luZyBzZWxlY3Rpb25TdGFydC9zZWxlY3Rpb25FbmQgdGhyb3VnaG91dCBjb2RlKQogIC8vIFhYWCBkb2Vzbid0IHdvcmsgaW4gSUUsIGV2ZW4gdGhvdWdoIGl0IGNvbnRhaW5zIElFLXNwZWNpZmljIGNvZGUKICBmdW5jdGlvbiBnZXRjYXJldHBvcyhpbnApCiAgewogICAgaWYoaW5wLnNlbGVjdGlvbkVuZCAhPSBudWxsKQogICAgICByZXR1cm4gaW5wLnNlbGVjdGlvbkVuZDsKCiAgICBpZihpbnAuY3JlYXRlVGV4dFJhbmdlKQogICAgewogICAgICB2YXIgZG9jcmFuZ2UgPSBfd2luLlNoZWxsLmRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOwogICAgICB2YXIgaW5wcmFuZ2UgPSBpbnAuY3JlYXRlVGV4dFJhbmdlKCk7CiAgICAgIGlmIChpbnByYW5nZS5zZXRFbmRQb2ludCkKICAgICAgewogICAgICAgIGlucHJhbmdlLnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0JywgZG9jcmFuZ2UpOwogICAgICAgIHJldHVybiBpbnByYW5nZS50ZXh0Lmxlbmd0aDsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBpbnAudmFsdWUubGVuZ3RoOyAvLyBzdWNrcywgcHVudAogIH0KCiAgZnVuY3Rpb24gc2V0c2VsZWN0aW9udG8oaW5wLHBvcykKICB7CiAgICBpZihpbnAuc2VsZWN0aW9uU3RhcnQpIHsKICAgICAgaW5wLnNlbGVjdGlvblN0YXJ0ID0gaW5wLnNlbGVjdGlvbkVuZCA9IHBvczsKICAgIH0KICAgIGVsc2UgaWYoaW5wLmNyZWF0ZVRleHRSYW5nZSkgewogICAgICB2YXIgZG9jcmFuZ2UgPSBfd2luLlNoZWxsLmRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOwogICAgICB2YXIgaW5wcmFuZ2UgPSBpbnAuY3JlYXRlVGV4dFJhbmdlKCk7CiAgICAgIGlucHJhbmdlLm1vdmUoJ2NoYXJhY3RlcicscG9zKTsKICAgICAgaW5wcmFuZ2Uuc2VsZWN0KCk7CiAgICB9CiAgICBlbHNlIHsgLy8gZXJyLi4uCiAgICAvKgogICAgICBpbnAuc2VsZWN0KCk7CiAgICAgIGlmKF93aW4uU2hlbGwuZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkpCiAgICAgICAgX3dpbi5TaGVsbC5kb2N1bWVudC5nZXRTZWxlY3Rpb24oKSA9ICIiOwogICAgICAgICovCiAgICB9CiAgfQogICAgLy8gZ2V0IHBvc2l0aW9uIG9mIGN1cnNvciB3aXRoaW4gdGhlIGlucHV0IGJveAogICAgdmFyIGNhcmV0ID0gZ2V0Y2FyZXRwb3MoX2luKTsKCiAgICBpZihjYXJldCkgewogICAgICAvL2R1bXAoIi0tLS1cbiIpOwogICAgICB2YXIgZG90cG9zLCBzcGFjZXBvcywgY29tcGxldGUsIG9iajsKICAgICAgLy9kdW1wKCJjYXJldCBwb3M6ICIgKyBjYXJldCArICJcbiIpOwogICAgICAvLyBzZWUgaWYgdGhlcmUncyBhIGRvdCBiZWZvcmUgaGVyZQogICAgICBkb3Rwb3MgPSBmaW5kYmVnaW5uaW5nKF9pbi52YWx1ZSwgY2FyZXQtMSwgdHJ1ZSk7CiAgICAgIC8vZHVtcCgiZG90IHBvczogIiArIGRvdHBvcyArICJcbiIpOwogICAgICBpZihkb3Rwb3MgPT0gLTEgfHwgX2luLnZhbHVlLmNoYXJBdChkb3Rwb3MpICE9ICcuJykgewogICAgICAgIGRvdHBvcyA9IGNhcmV0OwovL2R1bXAoImNoYW5nZWQgZG90IHBvczogIiArIGRvdHBvcyArICJcbiIpOwogICAgICB9CgogICAgICAvLyBsb29rIGJhY2t3YXJkcyBmb3IgYSBub24tdmFyaWFibGUtbmFtZSBjaGFyYWN0ZXIKICAgICAgc3BhY2Vwb3MgPSBmaW5kYmVnaW5uaW5nKF9pbi52YWx1ZSwgZG90cG9zLTEsIGZhbHNlKTsKICAgICAgLy9kdW1wKCJzcGFjZSBwb3M6ICIgKyBzcGFjZXBvcyArICJcbiIpOwogICAgICAvLyBnZXQgdGhlIG9iamVjdCB3ZSdyZSB0cnlpbmcgdG8gY29tcGxldGUgb24KICAgICAgaWYoc3BhY2Vwb3MgPT0gZG90cG9zIHx8IHNwYWNlcG9zKzEgPT0gZG90cG9zIHx8IGRvdHBvcyA9PSBjYXJldCkKICAgICAgewogICAgICAgIC8vIHRyeSBjb21wbGV0aW5nIGZ1bmN0aW9uIGFyZ3MKICAgICAgICBpZihfaW4udmFsdWUuY2hhckF0KGRvdHBvcykgPT0gJygnIHx8CiAoX2luLnZhbHVlLmNoYXJBdChzcGFjZXBvcykgPT0gJygnICYmIChzcGFjZXBvcysxKSA9PSBkb3Rwb3MpKQogICAgICAgIHsKICAgICAgICAgIHZhciBmbixmbmFtZTsKICB2YXIgZnJvbSA9IChfaW4udmFsdWUuY2hhckF0KGRvdHBvcykgPT0gJygnKSA/IGRvdHBvcyA6IHNwYWNlcG9zOwogICAgICAgICAgc3BhY2Vwb3MgPSBmaW5kYmVnaW5uaW5nKF9pbi52YWx1ZSwgZnJvbS0xLCBmYWxzZSk7CgogICAgICAgICAgZm5hbWUgPSBfaW4udmFsdWUuc3Vic3RyKHNwYWNlcG9zKzEsZnJvbS0oc3BhY2Vwb3MrMSkpOwogIC8vZHVtcCgiZm5hbWU6ICIgKyBmbmFtZSArICJcbiIpOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgd2l0aChfd2luLlNoZWxsLl9zY29wZSkKICAgICAgICAgICAgICB3aXRoKF93aW4pCiAgICAgICAgICAgICAgICB3aXRoKFNoZWxsLnNoZWxsQ29tbWFuZHMpCiAgICAgICAgICAgICAgICAgIGZuID0gZXZhbChmbmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgICBjYXRjaChlcikgewogICAgICAgICAgICAvL2R1bXAoJ2ZuIGlzIG5vdCBhIHZhbGlkIG9iamVjdFxuJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGZuID09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgLy9kdW1wKCdmbiBpcyB1bmRlZmluZWQnKTsKICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGZuIGluc3RhbmNlb2YgRnVuY3Rpb24pCiAgICAgICAgICB7CiAgICAgICAgICAgIC8vIFByaW50IGZ1bmN0aW9uIGRlZmluaXRpb24sIGluY2x1ZGluZyBhcmd1bWVudCBuYW1lcywgYnV0IG5vdCBmdW5jdGlvbiBib2R5CiAgICAgICAgICAgIGlmKCFmbi50b1N0cmluZygpLm1hdGNoKC9mdW5jdGlvbiAuKz9cKFwpICtce1xuICtcW25hdGl2ZSBjb2RlXF1cblx9LykpCiAgICAgICAgICAgICAgcHJpbnRsbihmbi50b1N0cmluZygpLm1hdGNoKC9mdW5jdGlvbiAuKz9cKC4qP1wpLyksICJ0YWJjb21wbGV0ZSIpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgICAgb2JqID0gX3dpbjsKICAgICAgfQogICAgICBlbHNlCiAgICAgIHsKICAgICAgICB2YXIgb2JqbmFtZSA9IF9pbi52YWx1ZS5zdWJzdHIoc3BhY2Vwb3MrMSxkb3Rwb3MtKHNwYWNlcG9zKzEpKTsKICAgICAgICAvL2R1bXAoIm9iam5hbWU6IHwiICsgb2JqbmFtZSArICJ8XG4iKTsKICAgICAgICB0cnkgewogICAgICAgICAgd2l0aChfd2luLlNoZWxsLl9zY29wZSkKICAgICAgICAgICAgd2l0aChfd2luKQogICAgICAgICAgICAgICAgb2JqID0gZXZhbChvYmpuYW1lKTsKICAgICAgICB9CiAgICAgICAgY2F0Y2goZXIpIHsKICAgICAgICAgIHByaW50RXJyb3IoZXIpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZihvYmogPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAvLyBzb21ldGltZXMgdGhpcyBpcyB0YWJjb21wbGV0ZSdzIGZhdWx0LCBzbyBkb24ndCBwcmludCBpdCA6KAogICAgICAgICAgLy8gZS5nLiBjb21wbGV0aW5nIGZyb20gInByaW50KGRvY3VtZW50LmdldEVsZW1lbnRzIgogICAgICAgICAgLy8gcHJpbnRsbigiQ2FuJ3QgY29tcGxldGUgZnJvbSBudWxsIG9yIHVuZGVmaW5lZCBleHByZXNzaW9uICIgKyBvYmpuYW1lLCAiZXJyb3IiKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy9kdW1wKCJvYmo6ICIgKyBvYmogKyAiXG4iKTsKICAgICAgLy8gZ2V0IHRoZSB0aGluZyB3ZSdyZSB0cnlpbmcgdG8gY29tcGxldGUKICAgICAgaWYoZG90cG9zID09IGNhcmV0KQogICAgICB7CiAgICAgICAgaWYoc3BhY2Vwb3MrMSA9PSBkb3Rwb3MgfHwgc3BhY2Vwb3MgPT0gZG90cG9zKQogICAgICAgIHsKICAgICAgICAgIC8vIG5vdGhpbmcgdG8gY29tcGxldGUKICAgICAgICAgIC8vZHVtcCgibm90aGluZyB0byBjb21wbGV0ZVxuIik7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBjb21wbGV0ZSA9IF9pbi52YWx1ZS5zdWJzdHIoc3BhY2Vwb3MrMSxkb3Rwb3MtKHNwYWNlcG9zKzEpKTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBjb21wbGV0ZSA9IF9pbi52YWx1ZS5zdWJzdHIoZG90cG9zKzEsY2FyZXQtKGRvdHBvcysxKSk7CiAgICAgIH0KICAgICAgLy9kdW1wKCJjb21wbGV0ZTogIiArIGNvbXBsZXRlICsgIlxuIik7CiAgICAgIC8vIG9rLCBub3cgbG9vayBhdCBhbGwgdGhlIHByb3BzL21ldGhvZHMgb2YgdGhpcyBvYmoKICAgICAgLy8gYW5kIGZpbmQgb25lcyBzdGFydGluZyB3aXRoICdjb21wbGV0ZScKICAgICAgdmFyIG1hdGNoZXMgPSBbXTsKICAgICAgdmFyIGJlc3RtYXRjaCA9IG51bGw7CiAgICAgIGZvcih2YXIgYSBpbiBvYmopCiAgICAgIHsKICAgICAgICAvL2EgPSBhLnRvU3RyaW5nKCk7CiAgICAgICAgLy9YWFg6IG1ha2luZyBpdCBsb3dlcmNhc2UgY291bGQgaGVscCBzb21lIGNhc2VzLAogICAgICAgIC8vIGJ1dCBzY3Jld3MgdXAgbXkgZ2VuZXJhbCBsb2dpYy4KICAgICAgICBpZihhLnN1YnN0cigwLGNvbXBsZXRlLmxlbmd0aCkgPT0gY29tcGxldGUpIHsKICAgICAgICAgIG1hdGNoZXMucHVzaChhKTsKICAgICAgICAgIC8vLy9kdW1wKCJtYXRjaDogIiArIGEgKyAiXG4iKTsKICAgICAgICAgIC8vIGlmIG5vIGJlc3QgbWF0Y2gsIHRoaXMgaXMgdGhlIGJlc3QgbWF0Y2gKICAgICAgICAgIGlmKGJlc3RtYXRjaCA9PSBudWxsKQogICAgICAgICAgewogICAgICAgICAgICBiZXN0bWF0Y2ggPSBhOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIC8vIHRoZSBiZXN0IG1hdGNoIGlzIHRoZSBsb25nZXN0IGNvbW1vbiBzdHJpbmcKICAgICAgICAgICAgZnVuY3Rpb24gbWluKGEsYil7IHJldHVybiAoKGE8Yik/YTpiKTsgfQogICAgICAgICAgICB2YXIgaTsKICAgICAgICAgICAgZm9yKGk9MDsgaTwgbWluKGJlc3RtYXRjaC5sZW5ndGgsIGEubGVuZ3RoKTsgaSsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgaWYoYmVzdG1hdGNoLmNoYXJBdChpKSAhPSBhLmNoYXJBdChpKSkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJlc3RtYXRjaCA9IGJlc3RtYXRjaC5zdWJzdHIoMCxpKTsKICAgICAgICAgICAgLy8vL2R1bXAoImJlc3RtYXRjaCBsZW46ICIgKyBpICsgIlxuIik7CiAgICAgICAgICB9CiAgICAgICAgICAvLy8vZHVtcCgiYmVzdG1hdGNoOiAiICsgYmVzdG1hdGNoICsgIlxuIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIGJlc3RtYXRjaCA9IChiZXN0bWF0Y2ggfHwgIiIpOwogICAgICAvLy8vZHVtcCgibWF0Y2hlczogIiArIG1hdGNoZXMgKyAiXG4iKTsKICAgICAgdmFyIG9iakFuZENvbXBsZXRlID0gKG9iam5hbWUgfHwgb2JqKSArICIuIiArIGJlc3RtYXRjaDsKICAgICAgLy9kdW1wKCJtYXRjaGVzLmxlbmd0aDogIiArIG1hdGNoZXMubGVuZ3RoICsgIiwgdG9vTWFueU1hdGNoZXM6ICIgKyB0b29NYW55TWF0Y2hlcyArICIsIG9iakFuZENvbXBsZXRlOiAiICsgb2JqQW5kQ29tcGxldGUgKyAiXG4iKTsKICAgICAgaWYobWF0Y2hlcy5sZW5ndGggPiAxICYmICh0b29NYW55TWF0Y2hlcyA9PSBvYmpBbmRDb21wbGV0ZSB8fCBtYXRjaGVzLmxlbmd0aCA8PSAxMCkpIHsKCiAgICAgICAgcHJpbnRXaXRoUnVuaW4oIk1hdGNoZXM6ICIsIG1hdGNoZXMuam9pbignLCAnKSwgInRhYmNvbXBsZXRlIik7CiAgICAgICAgdG9vTWFueU1hdGNoZXMgPSBudWxsOwogICAgICB9CiAgICAgIGVsc2UgaWYobWF0Y2hlcy5sZW5ndGggPiAxMCkKICAgICAgewogICAgICAgIHByaW50bG4obWF0Y2hlcy5sZW5ndGggKyAiIG1hdGNoZXMuICBQcmVzcyB0YWIgYWdhaW4gdG8gc2VlIHRoZW0gYWxsIiwgInRhYmNvbXBsZXRlIik7CiAgICAgICAgdG9vTWFueU1hdGNoZXMgPSBvYmpBbmRDb21wbGV0ZTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICB0b29NYW55TWF0Y2hlcyA9IG51bGw7CiAgICAgIH0KICAgICAgaWYoYmVzdG1hdGNoICE9ICIiKQogICAgICB7CiAgICAgICAgdmFyIHNzdGFydDsKICAgICAgICBpZihkb3Rwb3MgPT0gY2FyZXQpIHsKICAgICAgICAgIHNzdGFydCA9IHNwYWNlcG9zKzE7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgc3N0YXJ0ID0gZG90cG9zKzE7CiAgICAgICAgfQogICAgICAgIF9pbi52YWx1ZSA9IF9pbi52YWx1ZS5zdWJzdHIoMCwgc3N0YXJ0KQogICAgICAgICAgICAgICAgICArIGJlc3RtYXRjaAogICAgICAgICAgICAgICAgICArIF9pbi52YWx1ZS5zdWJzdHIoY2FyZXQpOwogICAgICAgIHNldHNlbGVjdGlvbnRvKF9pbixjYXJldCArIChiZXN0bWF0Y2gubGVuZ3RoIC0gY29tcGxldGUubGVuZ3RoKSk7CiAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gcHJpbnRRdWVzdGlvbihxKQp7CiAgcHJpbnRsbihxLCAiaW5wdXQiKTsKfQoKZnVuY3Rpb24gcHJpbnRBbnN3ZXIoYSkKewogIGlmIChhICE9PSB1bmRlZmluZWQpIHsKICAgIHByaW50bG4oYSwgIm5vcm1hbE91dHB1dCIpOwogICAgc2hlbGxDb21tYW5kcy5hbnMgPSBhOwogIH0KfQoKZnVuY3Rpb24gcHJpbnRFcnJvcihlcikKewogIHZhciBsaW5lTnVtYmVyU3RyaW5nOwoKICBsYXN0RXJyb3IgPSBlcjsgLy8gZm9yIGRlYnVnZ2luZyB0aGUgc2hlbGwKICBpZiAoZXIubmFtZSkKICB7CiAgICAvLyBsaW5lTnVtYmVyU3RyaW5nIHNob3VsZCBub3QgYmUgIiIsIHRvIGF2b2lkIGEgdmVyeSB3YWNreSBidWcgaW4gSUUgNi4KICAgIGxpbmVOdW1iZXJTdHJpbmcgPSAoZXIubGluZU51bWJlciAhPSB1bmRlZmluZWQpID8gKCIgb24gbGluZSAiICsgZXIubGluZU51bWJlciArICI6ICIpIDogIjogIjsKICAgIHByaW50bG4oZXIubmFtZSArIGxpbmVOdW1iZXJTdHJpbmcgKyBlci5tZXNzYWdlLCAiZXJyb3IiKTsgLy8gQmVjYXVzZSBJRSBkb2Vzbid0IGhhdmUgZXJyb3IudG9TdHJpbmcuCiAgfQogIGVsc2UKICAgIHByaW50bG4oZXIsICJlcnJvciIpOyAvLyBCZWNhdXNlIHNlY3VyaXR5IGVycm9ycyBpbiBNb3ogL29ubHkvIGhhdmUgdG9TdHJpbmcuCn0KCmZ1bmN0aW9uIGdvKHMpCnsKICBfaW4udmFsdWUgPSBxdWVzdGlvbiA9IHMgPyBzIDogX2luLnZhbHVlOwoKICBpZiAocXVlc3Rpb24gPT0gIiIpCiAgICByZXR1cm47CgogIGhpc3RMaXN0W2hpc3RMaXN0Lmxlbmd0aC0xXSA9IHF1ZXN0aW9uOwogIGhpc3RMaXN0W2hpc3RMaXN0Lmxlbmd0aF0gPSAiIjsKICBoaXN0UG9zID0gaGlzdExpc3QubGVuZ3RoIC0gMTsKCiAgLy8gVW5mb3J0dW5hdGVseSwgdGhpcyBoYXMgdG8gaGFwcGVuICpiZWZvcmUqIHRoZSBKYXZhU2NyaXB0IGlzIHJ1biwgc28gdGhhdAogIC8vIHByaW50KCkgb3V0cHV0IHdpbGwgZ28gaW4gdGhlIHJpZ2h0IHBsYWNlLgogIF9pbi52YWx1ZT0nJzsKICByZWNhbGN1bGF0ZUlucHV0SGVpZ2h0KCk7CiAgcHJpbnRRdWVzdGlvbihxdWVzdGlvbik7CgogIGlmIChfd2luLmNsb3NlZCkgewogICAgcHJpbnRFcnJvcigiVGFyZ2V0IHdpbmRvdyBoYXMgYmVlbiBjbG9zZWQuIik7CiAgICByZXR1cm47CiAgfQoKICB0cnkgeyAoIlNoZWxsIiBpbiBfd2luKSB9CiAgY2F0Y2goZXIpIHsKICAgIHByaW50RXJyb3IoIlRoZSBKYXZhU2NyaXB0IFNoZWxsIGNhbm5vdCBhY2Nlc3MgdmFyaWFibGVzIGluIHRoZSB0YXJnZXQgd2luZG93LiAgVGhlIG1vc3QgbGlrZWx5IHJlYXNvbiBpcyB0aGF0IHRoZSB0YXJnZXQgd2luZG93IG5vdyBoYXMgYSBkaWZmZXJlbnQgcGFnZSBsb2FkZWQgYW5kIHRoYXQgcGFnZSBoYXMgYSBkaWZmZXJlbnQgaG9zdG5hbWUgdGhhbiB0aGUgb3JpZ2luYWwgcGFnZS4iKTsKICAgIHJldHVybjsKICB9CgogIGlmICghKCJTaGVsbCIgaW4gX3dpbikpCiAgICBpbml0VGFyZ2V0KCk7IC8vIHNpbGVudAoKICAvLyBFdmFsdWF0ZSBTaGVsbC5xdWVzdGlvbiB1c2luZyBfd2luJ3MgZXZhbCAodGhpcyBpcyB3aHkgZXZhbCBpc24ndCBpbiB0aGUgfHdpdGh8LCBJSVJDKS4KICBfd2luLmxvY2F0aW9uLmhyZWYgPSAiamF2YXNjcmlwdDp0cnl7IFNoZWxsLnByaW50QW5zd2VyKGV2YWwoJ3dpdGgoU2hlbGwuX3Njb3BlKSB3aXRoKFNoZWxsLnNoZWxsQ29tbWFuZHMpIHsnICsgU2hlbGwucXVlc3Rpb24gKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDEwKSArICd9JykpOyB9IGNhdGNoKGVyKSB7IFNoZWxsLnByaW50RXJyb3IoZXIpOyB9OyBzZXRUaW1lb3V0KFNoZWxsLnJlZm9jdXMsIDApOyB2b2lkIDAiOwp9Cgo8L3NjcmlwdD4KCjwhLS0gZm9yIGh0dHA6Ly90ZWQubWllbGN6YXJlay5vcmcvY29kZS9tb3ppbGxhL2V4dGVuc2lvbmRldi8gLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImNocm9tZTovL2V4dGVuc2lvbmRldi9jb250ZW50L3JkZmhpc3RvcnkuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJjaHJvbWU6Ly9leHRlbnNpb25kZXYvY29udGVudC9jaHJvbWVTaGVsbEV4dHJhcy5qcyI+PC9zY3JpcHQ+Cgo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgYm9keSB7IGJhY2tncm91bmQ6IGJsYWNrOyBjb2xvcjogYmxhY2s7IH0KICAgIAogICAgI291dHB1dCB7IHdoaXRlLXNwYWNlOiBwcmU7IHdoaXRlLXNwYWNlOiAtbW96LXByZS13cmFwOyBoZWlnaHQ6IDQ1dmg7IGJhY2tncm91bmQtY29sb3I6IHJnYigzNywgMzcsIDM3KTsgb3ZlcmZsb3c6IGF1dG87fSAvKiBQcmVzZXJ2ZSBsaW5lIGJyZWFrcywgYnV0IHdyYXAgdG9vIGlmIGJyb3dzZXIgc3VwcG9ydHMgaXQgKi8KICAgIGgzIHsgbWFyZ2luLXRvcDogMDsgbWFyZ2luLWJvdHRvbTogMGVtOyB9CiAgICBoMyArIGRpdiB7IG1hcmdpbjogMDsgfQogICAgCiAgICBmb3JtIHsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwOyB9CiAgICAjaW5wdXQgeyB3aWR0aDogMTAwJTsgYm9yZGVyOiBub25lOyBwYWRkaW5nOiAwOyBvdmVyZmxvdzogYXV0bzsgYm9yZGVyLXN0eWxlOiBzb2xpZDsgYm9yZGVyLXdpZHRoOiAxcHg7IGhlaWdodDogMjUwcHg7IGJhY2tncm91bmQ6IGJsYWNrOyBib3JkZXItY29sb3I6IGdyZWVuO30KICAgICNpbnB1dDpmb2N1cyB7CiAgICAgIG91dGxpbmU6IG5vbmU7CiAgICAgIGJvcmRlci1jb2xvcjogcmdiYSgwLCAyNTUsIDAsIDAuNTg5KTsKICAgIH0KICAgIC5pbnB1dCB7IGNvbG9yOiBsaW1lOyAgZm9udDogaW5oZXJpdDsgZm9udC13ZWlnaHQ6IGJvbGQ7IG1hcmdpbi10b3A6IC41ZW07IC8qIGJhY2tncm91bmQ6ICNFNkU2RkY7ICovIH0KICAgIC5ub3JtYWxPdXRwdXQgeyBjb2xvcjogbGltZTsgIH0KICAgIC5wcmludCB7IGNvbG9yOiByZ2IoMCwgMTU1LCAwKTsgIH0KICAgIC5lcnJvciB7IGNvbG9yOiByZWQ7ICBtYXJnaW4tdG9wOiA1cHg7fQogICAgLnByb3BMaXN0IHsgY29sb3I6IGdyZWVuOyAgfQogICAgLm1lc3NhZ2UgeyBjb2xvcjogZ3JlZW47ICB9CiAgICAudGFiY29tcGxldGUgeyBjb2xvcjogcHVycGxlOyAgfQogICAgCiAgICAKICAgIGJvZHkgewogICAgICAgIGNvbG9yOiBsaW1lOwogICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrOwogICAgICAgIGZvbnQtc2l6ZTogbGFyZ2U7CiAgICAgICAgZm9udC1mYW1pbHk6ICc4Yml0JzsKICAgIH0KICAgIAogICAgLmJ0biB7CiAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrOwogICAgICBjb2xvcjogbGltZTsKICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICAgICAgYm9yZGVyLWNvbG9yOiBncmVlbjsKICAgICAgcGFkZGluZzogNHB4OwogICAgICBtYXJnaW4tbGVmdDogNXB4OwogICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICB9CiAgICAuYnRuOmhvdmVyIHsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogbGltZTsKICAgICAgY29sb3I6IGJsYWNrOwogICAgfQogICAgCiAgICAKICAgIAogICAgQGZvbnQtZmFjZSB7CiAgICAgIGZvbnQtZmFtaWx5OiAnQ29ubjInOwogICAgICBzcmM6IHVybCgnLi4vQXNzZXRzL0ZvbnRzL0Nvbm5lY3Rpb25JaS0yd2o4Lm90ZicpOwogICAgfQogICAgQGZvbnQtZmFjZSB7CiAgICAgIGZvbnQtZmFtaWx5OiAnOGJpdCc7CiAgICAgIHNyYzogdXJsKCcuLi9Bc3NldHMvRm9udHMvRGlhcnlPZkFuOEJpdE1hZ2UtbFlERC50dGYnKTsKICAgIH0KICAgIEBmb250LWZhY2UgewogICAgICBmb250LWZhbWlseTogJ0NvbXB1dGVyJzsKICAgICAgc3JjOiB1cmwoJy4uL0Fzc2V0cy9Gb250cy9Db21wdXRlclBpeGVsNy1tbkwyLnR0ZicpOwogICAgfQogICAgQGZvbnQtZmFjZSB7CiAgICAgIGZvbnQtZmFtaWx5OiAnUGl4ZWxvaWQnOwogICAgICBzcmM6IHVybCgnLi4vQXNzZXRzL0ZvbnRzL1BpeGVsb2lkTW9uby0xRzhhZS50dGYnKTsKICAgIH0KICAgIDwvc3R5bGU+CiIsIkJJRCI6IiJ9',\n\t\t\tpages: []\n\t\t}\n\n\t\tPKGs.push(TestPKG);\n\t\tfunction RunPKG(id) {\n\t\tfd = atob(PKGs[id].index)\n\t\tExecute();\n\t\t}\n\n\n\tfunction openPKG() {\n\t  document.getElementById(\"ScriptManager\").style.height = \"100%\";\n\t}\n\t\n\tfunction closePKG() {\n\t  document.getElementById(\"ScriptManager\").style.height = \"0%\";\n\t}\n\n\n\nfunction DisplayScripts() {\n\tvar my = document.getElementById(\"myScripts\");\n\tdocument.getElementById(\"C_INDEX\").innerText = \"Latest index: \" + LatestIndex;\n\tdocument.getElementById(\"S_INDEX\").innerText = \"Latest store index: \" + StoreIndex;\n\tmy.innerHTML = \"\";\n\tfor (let i =0; i < Scripts.length; i++ ) {\nmy.innerHTML += `\n<div id=\"DIS`+i+`\">\n<button onclick=\"window.open('`+Scripts[i].src+`')\" class=\"btn\">`+Scripts[i].name+`</button> Loaded: <button class=\"Loaded `+Scripts[i].loaded+`\">`+Scripts[i].loaded+`</button> <button class=\"loaded No\" onclick=\"document.getElementById('LoadScript`+i+`').remove();document.getElementById('DIS`+i+`').remove();println('REMOVED: `+Scripts[i].name+`','error')\">Remove</button> </div>`\n\t\n}\n}\n\n\t","id":"","type":"","encr":"none","src":""},{"code":"\nsetTimeout(function (){\n\t  \ninit()\n\t            \n}, 1000); \n","id":"","type":"","encr":"none","src":""},{"code":"\n\tvar BIOS_Ver;\n\tvar Client_Ver;\n\tvar BIOSfile = \"\";\n\tvar b64Client = \"\";\n\tvar ping = false;\n\tvar LatestIndex = \"0\";\n\tvar LatestDataIndex = \"0\";\n\tvar StoreIndex = \"0\";\n\tvar LoadedSrc = false;\n\tvar CurrentBIOS = \"0.0_test\";\n\tvar CurrentCver = \"0.5.1\";\n\tvar StoreData;\n\n\tvar StoreTest = {\n\t\titemName: \"Test123\",\n\t\titemDes: \"a test install\",\n\t\titemEXE: \"\"\n\t}\n\n\nif (localStorage.getItem(\"OEXE_index\") !== null) {\n\tLatestIndex = localStorage.getItem(\"OEXE_index\");\n}\nif (localStorage.getItem(\"OEXE_data_index\") !== null) {\n\tLatestDataIndex = localStorage.getItem(\"OEXE_data_index\");\n}\nif (localStorage.getItem(\"OEXE_store_index\") !== null) {\n\tStoreIndex = localStorage.getItem(\"OEXE_store_index\");\n}\n\nfunction GetLatestIndex() {\n\tvar num = JSON.parse(LatestIndex) + 1;\n\tvar num2 = JSON.parse(LatestDataIndex) + 1;\n\tLoad(\"Index\"+num,\"https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/Indexes/\"+num+\"/Current.js\");\n\tsetTimeout(function (){\n\t\tLoad(\"DataIndex\"+num2,\"https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/Indexes/\"+num2+\"/DataIndex.js\");\n\t\tLatestDataIndex = localStorage.getItem(\"OEXE_data_index\");\n}, 1000); \n\n\n\tLatestIndex = localStorage.getItem(\"OEXE_index\");\n\n}\n\n\nfunction ls(item,data) {\n\tlocalStorage.setItem(item,data);\n\tprint(\"SET: \" + item + \" TO: \" + data);\n}\n\n\n\nfunction GetStoreIndex() {\n\tvar num = JSON.parse(StoreIndex) + 1;\n\t//https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/Store/0/store.js\n\tLoad(\"Store\"+num,\"https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/Store/\"+num+\"/store.js\");\n\tsetTimeout(function (){\nif (LoadedSrc == true) {\n\tlocalStorage.setItem(\"OEXE_store_index\",num)\n}\nStoreIndex =  JSON.parse(localStorage.getItem(\"OEXE_store_index\"));\n}, 2000); \n\t//StoreIndex =  JSON.parse(localStorage.getItem(\"OEXE_store_index\"));\n\n}\n\n\n\nfunction UpdateClient() {\n\tprintln(\"This feature is in development! it may not work as intended\",\"error\")\n\tif (CurrentCver !== Client_Ver) {\n\t\tprintln(\"Updateing...\",\"message\");\n\t\tvar up = `\n\t\tvar CLIENT_DATA = \"`+b64Client+`\";\n\n\n//HTML doc V\n//var myString = \nvar doc = document.implementation.createHTMLDocument(); // Sandbox\nvar head;\n // Parse HTML properly\n\nfunction Open(data) {\n    doc.body.innerHTML = data;\n    var strip = stripScripts(data);\n head = data.match(/<head[^>]*>[\\s\\S]*<\\/head>/gi);\n console.log(head);\ndoc.head.innerHTML = head;\n    var js = [];\n    for (let i = 0; i < doc.getElementsByTagName('script').length; i++) {\n    js.push(doc.getElementsByTagName('script')[i]);\n    //(elem=doc.getElementsByTagName('script')[i]).parentNode.removeChild(elem)\n    \n    }\n    //alert(doc.getElementsByTagName('script'));\n    console.log(js)\n    \n    var e = window.open(\"\",\"\",\"width=300,height=100\");\n    var a = e.document;\n    a.body.innerHTML = strip; \n    for (let i = 0; i < js.length; i++) {\n    var s = document.createElement('script')\n    s.innerHTML = js[i].innerHTML;\n    s.type = js[i].type;\n    s.id = js[i].id;\n    a.body.appendChild(s);\n    }\n    \n}\n\n\nfunction stripScripts(s) {\nvar div = doc.createElement('div');\ndiv.innerHTML = s;\nvar scripts = div.getElementsByTagName('script');\nvar i = scripts.length;\nwhile (i--) {\n scripts[i].parentNode.removeChild(scripts[i]);\n}\nreturn div.innerHTML;\n}\n\n\n/*\n\n[].map.call(doc.getElementsByTagName('script'), function(el) {\nconsole.log(el.textContent)\nreturn el.textContent;\n});\n*/\n\n\n\n\n\nOpen(atob(CLIENT_DATA));\nwindow.close();\n\n\n\n\n\t\t`\n\t\tdownload(\"client\"+Client_Ver+\".js\",up);\n\t}else {\n\t\tprintln(\"Client is all up to date :)\",\"message\")\n\t}\n}\n\nfunction Load(name,src) {\n\tLoadedSrc = false;\n\tScripts.push({name: name, src: src, loaded: \"No\"});\t\n\tvar aae = Scripts.length-1;\n\tvar jsCode = document.createElement('script'); \n\tjsCode.id = \"LoadScript\"+aae;\n\tjsCode.setAttribute('src', src);      \n\tprint(\"Loading: \" + name + \" from: \" + src + \"...\");\n  document.body.appendChild(jsCode); \n  jsCode.onerror = function() {\n  println(\"Error loading: \" + this.src,\"error\"); // Error loading https://example.com/404.js\n};\n // jsCode.onload = Loaded();\n jsCode.addEventListener(\"load\", function(event) {\nconsole.log(event)\n Loaded();\n if (src == \"https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/Updates/\"+LatestIndex+\"/BIOS.js\") {\n\t//print(src)\n\tif (CurrentCver !== Client_Ver) {\n\t\tprintln(\"A NEW CLIENT.js IS AVAILABLE TYPE UpdateClient() IN THE SHELL\", \"error\")\n\t}\n }\n });\n  setTimeout(function (){\nDisplayScripts();\n}, 1000); \n\n}\nfunction Loaded() {\n\tvar e = Scripts.length - 1;\n\tScripts[e].loaded = \"Yes\";\n\tprintln(\"successfully loaded: \" + Scripts[e].src,\"message\");\n\tLoadedSrc = true;\n}\nfunction Log() {\n\tconsole.log(\"TEST\")\n}\nfunction GetLatest() {\n\n}\n\n\n\n\n\nfunction GetFileName() {\n\tvar fullPath = document.getElementById('fileInput').value;\nif (fullPath) {\n    var startIndex = (fullPath.indexOf('\\\\') >= 0 ? fullPath.lastIndexOf('\\\\') : fullPath.lastIndexOf('/'));\n    var filename = fullPath.substring(startIndex);\n    if (filename.indexOf('\\\\') === 0 || filename.indexOf('/') === 0) {\n        filename = filename.substring(1);\n    }\n return filename;\n}\n}\n\n\n//SCRIPT LOADER\n\nfunction Update() {\n\tLoad(\"BIOS#\"+LatestIndex,\"https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/Updates/\"+LatestIndex+\"/BIOS.js\");\n}\nfunction LoadScripts() {\n\tsetTimeout(function (){\n\t\tLoad(\"DATA#\"+LatestDataIndex,\"https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/Data/\"+LatestDataIndex+\"/data.js\");\n\t\tsetTimeout(function (){\n\tLoad(\"StoreImport\"+StoreIndex,\"https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/Store/\"+StoreIndex+\"/store.js\");\n\t//Load(\"LocalStore\",\"Store/storeImport.js\")\n}, 1000); \n}, 1000); \n\n/*\n\tsetTimeout(function (){\n\t\n}, 1000); \n\n*/\n\n}\n","id":"","type":"","encr":"none","src":""},{"code":"\n\tDisplayScripts();\n\tif (ping) {\n\tif (BIOS_Ver !== CurrentBIOS) {\n\t\tconsole.log(\"BIOS CAN BE UPDATED SEE UPDATER FOR MORE INFO\");\n\t//\talert(\"BIOS CAN BE UPDATED SEE UPDATER FOR MORE INFO\");\n\t}\n\tif (Client_Ver !== CurrentCver) {\n\t\tconsole.log(\"CLIENT CAN BE UPDATED SEE UPDATER FOR MORE INFO\")\n\t} \n}\n","id":"","type":"","encr":"none","src":""},{"code":"\n\nsetTimeout(function (){\nprintln(\"getting latest updates...\",\"message\");\nUpdate();\nLoadScripts();\n}, 1000); \n\n","id":"","type":"","encr":"none","src":""},{"code":"\ndocument.title = \"OEXE CLIENT\";\n\n\nconst OEXE = new BroadcastChannel(\"OEXE_DEV\");\n\nsetTimeout(function (){\nconsole.log(window.location.origin == null);\n  if (window.location.origin == null || \"\") { \nalert(\"WARNING YOU THERE IS NO PAGE ORIGIN AND THINGS LIKE LOCALSTORAGE WILL NOT WORK\"); \n}\n\n       \n     \n}, 1000); \n\n\n\n\n\nfunction PostBC(message) {\nOEXE.postMessage(message);\n}\n\n\n\n\n\n\nfunction IBC() {\n\n\nvar e = gd.createElement('script');\nvar string = `\nconst OEXE = new BroadcastChannel(\"OEXE_DEV\");\n\nOEXE.onmessage = (event) => { \nconsole.log(event);\neval(event.data); \n};\n`\ne.innerHTML = string;\nalert(\"IMPORTED \" + e);\n\ngd.body.appendChild(e);\n}\n\n\n\n\n\n\n\n\n\n\n\n\nvar StoreLoaded = false;\nvar compiled;\nvar enc = \"b64\";\nvar fd;\nvar file;\nvar gd;\nvar exe;\nvar COMP_DATA;\nvar Gw;\nvar doc = document.implementation.createHTMLDocument();\nvar JustCompiled;\nfunction handleFileSelect(event) {\n    const reader = new FileReader()\n    reader.onload = handleFileLoad;\n    reader.readAsText(event.target.files[0])\n  }\n  \n  function handleFileLoad(event) {\n    console.log(event.target.result);\n    fd = event.target.result;\n    file = event.target;\n //   Execute();\n\n  }\n  \n  function init() {\n    document.getElementById('fileInput').addEventListener('change', handleFileSelect, false);\n  }\n\nfunction B(v) {\n    eval(v);\n}\n\ninit();\n\n\nfunction Execute() {\n\tvar params = [\n    'height='+screen.height,\n    'width='+screen.width,\n    'fullscreen=yes' // only works in IE, but here for completeness\n].join(',');\n\t//Gw\n\t//fd\n\t//COMP_DATA\n\tif (GetFileName() == undefined) {\n\t\tprintln(\"EXECUTEING: OEXE\",\"error\");\n\t}else {\n\tprintln(\"EXECUTEING: \" + GetFileName(),\"error\");\n\t}\n\tCOMP_DATA = JSON.parse(fd);\n    var win = window.open(\"\", \"OASIS EXE\", params);\n\twin.moveTo(0,0);\n\t Gw = win;\n    var doc = win.document;\n    gd = doc;\n    doc.head.innerHTML = COMP_DATA.head; \n    doc.body.innerHTML = COMP_DATA.body;\n  doc.body.id = COMP_DATA.BID;\n\nfor (let i = 0; i < COMP_DATA.js.length; i++) {\nvar sc = doc.createElement('script');\nif (COMP_DATA.js[i].encr == \"b64\") {\nsc.innerHTML = atob(COMP_DATA.js[i].code);\n}else {\n  sc.innerHTML = COMP_DATA.js[i].code;\n}\nsc.id = COMP_DATA.js[i].id;\nsc.type = COMP_DATA.js[i].type;\nif (COMP_DATA.js[i].src !== \"\" || COMP_DATA.js[i].src !==undefined) {\nsc.src = COMP_DATA.js[i].src;\n}\ndoc.body.appendChild(sc);\n\n\n}\n\n\n}\n\n\nfunction ExecuteURL(src){\n\t//Gw\n\t//fd\n\t//COMP_DATA\n\tvar params = [\n    'height='+screen.height,\n    'width='+screen.width,\n    'fullscreen=yes' // only works in IE, but here for completeness\n].join(',');\n\tLoad(src,src);\n\tsetTimeout(function (){\n \tprintln(\"EXECUTEING FROM: \" + src,\"error\");\n    eval(fd);\n    var win = window.open(\"\", \"OASIS EXE\", params);\n\twin.moveTo(0,0);\n\t Gw = win;\n    var doc = win.document;\n    gd = doc;\n    doc.head.innerHTML = COMP_DATA.head; \n    doc.body.innerHTML = COMP_DATA.body;\n  doc.body.id = COMP_DATA.BID;\n\nfor (let i = 0; i < COMP_DATA.js.length; i++) {\nvar sc = doc.createElement('script');\nif (COMP_DATA.js[i].encr == \"b64\") {\nsc.innerHTML = atob(COMP_DATA.js[i].code);\n}else {\n  sc.innerHTML = COMP_DATA.js[i].code;\n}\nsc.id = COMP_DATA.js[i].id;\nsc.type = COMP_DATA.js[i].type;\nif (COMP_DATA.js[i].src !== \"\" || COMP_DATA.js[i].src !==undefined) {\nsc.src = COMP_DATA.js[i].src;\n}\ndoc.body.appendChild(sc);\n\n\n}\n}, 2000); \n\n\n}\n\n\n\n\n\n\n//download(\"FileName\"+\".OEXE\",\"var COMP_DATA = \" + JSON.stringify(JustCompiled));\nfunction download(filename, text) {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n  \n    element.style.display = 'none';\n    document.body.appendChild(element);\n  \n    element.click();\n  \n    document.body.removeChild(element);\n  }\n\n\nfunction stripScripts(s) {\n    var div = doc.createElement('div');\n    div.innerHTML = s;\n    var scripts = div.getElementsByTagName('script');\n    var i = scripts.length;\n    while (i--) {\n     scripts[i].parentNode.removeChild(scripts[i]);\n    }\n    return div.innerHTML;\n    }\n\n\n\n\n\n\n\n\n\nfunction Compile(data,enc) {\n\tvar FileName = GetFileName();\n\tFileName = FileName.split(\".html\")\n\tFileName = FileName[0];\n    var comp = {\n        js: [],\n        body: \"\",\n        head: \"\",\n        BID: \"\",\n\t\tbody_items: {\n\t\t\tonLoad: \"\",\n\t\t\tstyle: \"\"\n\t\t}\n    }\n\ndoc.documentElement.innerHTML = data;\nvar str = stripScripts(doc.body.innerHTML);\nvar js = [];\nfor (let i = 0; i < doc.getElementsByTagName('script').length; i++) {\n/*\n    comp.js.push({\n        code: btoa(doc.getElementsByTagName('script')[i].innerHTML),\n        id: doc.getElementsByTagName('script')[i].id,\n        type: doc.getElementsByTagName('script')[i].type,\n        encr: \"b64\"\n    })   \n*/\n    comp.js.push({\n        code: doc.getElementsByTagName('script')[i].innerHTML,\n        id: doc.getElementsByTagName('script')[i].id,\n        type: doc.getElementsByTagName('script')[i].type,\n        encr: \"none\",\n\t\tsrc: doc.getElementsByTagName('script')[i].src,\n    })   \n\njs.push(doc.getElementsByTagName('script')[i]);\n}\ncomp.body = str;\ncomp.head = doc.head.innerHTML;\ncomp.BID = doc.body.id;\n\n\nconsole.log(comp);\n download(FileName+\".OEXE\",JSON.stringify(comp));\n JustCompiled = comp;\nreturn comp;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","id":"","type":"","encr":"none","src":""},{"code":"\n\t\n\n\t\n\n\tfunction browser() {\n\t     window.open(\n\t          \"https://g1kk4.csb.app\",\n\t          \"_blank\",\n\t          \"toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=1000,height=500\"\n\t        );\n\t}\n\t\n\n\tfunction frame(url)\n\t {\n\t     (function() {\n\t  // container\n\t  var container = document.createElement(\"div\");\n\t  container.id = \"link-viewer\";\n\t\n\n\t  container.style.all = \"unset\";\n\t\n\n\t  container.style.backgroundColor = \"#FFF\";\n\t  container.style.width = \"600px\";\t\n\t  container.style.height = \"600px\";\n\t  container.style.border = \"solid 1px #AAA\";\n\t  container.style.borderRadius = \"2px\";\n\t  container.style.position = \"fixed\";\n\t  container.style.top = \"100px\";\n\t  container.style.left = \"100px\";\n\t  container.style.zIndex = \"9999999999999999999\";\n\t\n\n\t  // iFrame\n\t  var iFrame = document.createElement(\"iframe\");\n\t  iFrame.id = \"link-viewer-iframe\";\n\t\n\n\t  iFrame.style.all = \"unset\";\n\t\n\n\t  iFrame.style.margin = \"0px\";\n\t  iFrame.style.width = container.style.width;\n\t  iFrame.height = container.style.height;\n\t  iFrame.style.border = \"none\";\n\t  iFrame.src = url;\n\t\n\n\t  iFrame.style.resize = \"both\";\n\t  iFrame.style.overflow = \"hidden\";\n\t\n\n\t  // content holder\n\t  var contentHolder = document.createElement(\"div\");\n\t  contentHolder.id = \"link-viewer-content-holder\";\n\t\n\n\t  contentHolder.style.all = \"unset\";\n\t\n\n\t  contentHolder.style.width = \"400px\";\n\t  contentHolder.style.height = \"600px\";\n\t  contentHolder.style.padding = \"0px\";\n\t  contentHolder.style.margin = \"0px\";\n\t\n\n\t  contentHolder.append(iFrame);\n\t  container.append(contentHolder);\n\t\n\n\t  // header\n\t  var header = document.createElement(\"div\");\n\t  header.id = \"link-viewer-header\";\n\t\n\n\t  header.style.all = \"unset\";\n\t\n\n\t  header.style.display = \"flex\";\n\t  header.style.justifyContent = \"space-between\";\n\t  header.style.alignItems = \"center\";\n\t  header.style.userSelect = \"none\";\n\t  header.style.padding = \"3px\";\n\t  header.style.margin = \"0px\";\n\t  header.style.borderBottom = \"solid 1px #AAA\";\n\t\n\n\t  header.style.height = \"20px\";\n\t  header.style.width = Number(contentHolder.style.width.slice(0, -2) - 6) + \"px\";\n\t\n\n\t  var dragged = false;\n\t  var startX = 0;\n\t  var startY = 0;\n\t  header.addEventListener(\"mousedown\", function(event) {\n\t    startX = Number(container.style.left.slice(0, -2)) - event.clientX;\n\t    startY = Number(container.style.top.slice(0, -2)) - event.clientY;\n\t    dragged = true;\n\t  });\n\t  header.addEventListener(\"mouseup\", function(event) {\n\t    dragged = false;\n\t  });\n\t\n\n\t  // Also keeping track of size too\n\t  window.addEventListener(\"mousemove\", function(event) {\n\t    if (dragged) {\n\t      container.style.top = (event.clientY + startY) + \"px\";\n\t      container.style.left = (event.clientX + startX) + \"px\";\n\t    }\n\t    var x = Number(container.style.left.slice(0, -2));\n\t    var y = Number(container.style.top.slice(0, -2));\n\t    if (x < 0) {\n\t      container.style.left = \"0px\";\n\t    }\n\t    if (y < 0) {\n\t      container.style.top = \"0px\";\n\t    }\n\t\n\n\t    contentHolder.style.height = iFrame.style.height;\n\t    contentHolder.style.width = iFrame.style.width;\n\t\n\n\t    header.style.width = (Number(contentHolder.style.width.slice(0, -2)) - 6) + \"px\";\n\t\n\n\t    container.style.width = contentHolder.style.width;\n\t    container.style.height = (Number(contentHolder.style.height.slice(0, -2)) + 27) + \"px\";\n\t\n\n\t    if(Number(header.style.width.slice(0, -2)) < 300){\n\t    contentHolder.style.width = \"300px\";\n\t    header.style.width = \"294px\";\n\t    container.style.width = \"300px\";\n\t    iFrame.style.width = \"300px\";\n\t    }\n\t  });\n\t\n\n\t  // text stuff\n\t  var headerTextHolder = document.createElement(\"div\");\n\t\n\n\t  headerTextHolder.style.all = \"unset\";\n\t\n\n\t  // header text\n\t  var headerText = document.createElement(\"h1\");\n\t  headerText.textContent = \"Link Viewer\";\n\t\n\n\t  headerText.style.all = \"unset\";\n\t\n\n\t  headerText.style.fontFamily = \"sans-serif\";\n\t  headerText.style.color = \"#444\";\n\t  headerText.style.fontSize = \"20px\";\n\t  headerText.style.margin = \"0px\";\n\t  headerText.style.padding = \"0px\";\n\t\n\n\t  headerTextHolder.append(headerText);\n\t  header.append(headerTextHolder);\n\t\n\n\t  // button stuff \n\t  var headerButtonHolder = document.createElement(\"div\");\n\t\n\n\t  headerButtonHolder.style.all = \"unset\";\n\t\n\n\t  // link button\n\t  var lButton = document.createElement(\"button\");\n\t  lButton.textContent = \"run url\";\n\t\n\n\t  lButton.style.all = \"unset\";\n\t\n\n\t  lButton.style.fontFamily = \"sans-serif\";\n\t  lButton.style.width = \"100px\";\n\t  lButton.style.height = \"20px\";\n\t  lButton.style.cursor = \"pointer\";\n\t  lButton.style.margin = \"0px 3px 0px 3px\";\n\t  lButton.style.color = \"#333\";\n\t  lButton.style.border = \"solid 1px #333\";\n\t  lButton.style.borderRadius = \"2px\";\n\t  lButton.style.backgroundColor = \"#EEE\";\n\t  lButton.style.textAlign = \"center\";\n\t\n\n\t  lButton.addEventListener(\"mouseover\", function(event) {\n\t    lButton.style.backgroundColor = \"#DDD\";\n\t  });\n\t  lButton.addEventListener(\"mouseleave\", function(event) {\n\t    lButton.style.backgroundColor = \"#EEE\";\n\t  });\n\t  lButton.addEventListener(\"click\", function(event) {\n\t   \n\t\n\n\t    iFrame.src = url;\n\t  });\n\t\n\n\t//  headerButtonHolder.append(lButton);\n\t\n\n\t  // minimize button\n\t  var mButton = document.createElement(\"button\");\n\t  mButton.textContent = \"-\";\n\t\n\n\t  mButton.style.all = \"unset\";\n\t\n\n\t  mButton.style.fontFamily = \"sans-serif\";\n\t  mButton.style.width = \"20px\";\n\t  mButton.style.height = \"20px\";\n\t  mButton.style.cursor = \"pointer\";\n\t  mButton.style.margin = \"0px 3px 0px 3px\";\n\t  mButton.style.color = \"#333\";\n\t  mButton.style.border = \"solid 1px #333\";\n\t  mButton.style.borderRadius = \"2px\";\n\t  mButton.style.backgroundColor = \"#EEE\";\n\t  mButton.style.textAlign = \"center\";\n\t\n\n\t  mButton.addEventListener(\"mouseover\", function(event) {\n\t    mButton.style.backgroundColor = \"#DDD\";\n\t  });\n\t  mButton.addEventListener(\"mouseleave\", function(event) {\n\t    mButton.style.backgroundColor = \"#EEE\";\n\t  });\n\t  mButton.addEventListener(\"click\", function(event) {\n\t    var closed = contentHolder.style.display === \"none\";\n\t    if (closed) {\n\t      contentHolder.style.display = \"block\";\n\t      header.style.borderBottom = \"solid 1px #AAA\";\n\t    } else {\n\t      contentHolder.style.display = \"none\";\n\t      header.style.borderBottom = \"none\";\n\t    }\n\t  });\n\t\n\n\t  headerButtonHolder.append(mButton);\n\t\n\n\t  // x button\n\t  var xButton = document.createElement(\"button\");\n\t  xButton.textContent = \"x\";\n\t\n\n\t  xButton.style.all = \"unset\";\n\t\n\n\t  xButton.style.fontFamily = \"sans-serif\";\n\t  xButton.style.width = \"20px\";\n\t  xButton.style.height = \"20px\";\n\t  xButton.style.cursor = \"pointer\";\n\t  xButton.style.margin = \"0px 3px 0px 3px\";\n\t  xButton.style.color = \"#333\";\n\t  xButton.style.border = \"solid 1px #333\";\n\t  xButton.style.borderRadius = \"2px\";\n\t  xButton.style.backgroundColor = \"#F33\";\n\t  xButton.style.textAlign = \"center\";\n\t\n\n\t  xButton.addEventListener(\"mouseover\", function(event) {\n\t    xButton.style.backgroundColor = \"#E22\";\n\t  });\n\t  xButton.addEventListener(\"mouseleave\", function(event) {\n\t    xButton.style.backgroundColor = \"#F33\";\n\t  });\n\t  xButton.addEventListener(\"click\", function(event) {\n\t    container.remove();\n\t  });\n\t\n\n\t  headerButtonHolder.append(xButton);\n\t  header.append(headerButtonHolder);\n\t\n\n\t  contentHolder.before(header);\n\t\n\n\t  // add to body\n\t  document.body = document.body || document.createElement(\"body\");\n\t  document.body.append(container);\n\t})();\n\t }\n\tvar\n\thistList = [\"\"],\n\thistPos = 0,\n\t_scope = {},\n\t_win, // a top-level context\n\tquestion,\n\t_in,\n\t_out,\n\ttooManyMatches = null,\n\tlastError = null;\n\t\n\n\tfunction refocus()\n\t{\n\t  _in.blur(); // Needed for Mozilla to scroll correctly.\n\t//  _in.focus();\n\t}\n\t\n\n\tfunction init()\n\t{\n\t  _in = document.getElementById(\"input\");\n\t  _out = document.getElementById(\"output\");\n\t\n\n\t  _win = window;\n\t\n\n\t  if (opener && !opener.closed)\n\t  {\n\t    println(\"Using bookmarklet version of shell: commands will run in opener's context.\", \"message\");\n\t    _win = window;\n\t  }\n\t\n\n\t  initTarget();\n\t\n\n\t  recalculateInputHeight();\n\t  refocus();\n\t}\n\t\n\n\tfunction initTarget()\n\t{\n\t  _win.Shell = window;\n\t  _win.print = shellCommands.print;\n\t}\n\t\n\n\t\n\n\t// Unless the user is selected something, refocus the textbox.\n\t// (requested by caillon, brendan, asa)\n\tfunction keepFocusInTextbox(e)\n\t{\n\t  var g = e.srcElement ? e.srcElement : e.target; // IE vs. standard\n\t\n\n\t  while (!g.tagName)\n\t    g = g.parentNode;\n\t  var t = g.tagName.toUpperCase();\n\t  if (t==\"A\" || t==\"INPUT\")\n\t    return;\n\t\n\n\t  if (window.getSelection) {\n\t    // Mozilla\n\t    if (String(window.getSelection()))\n\t      return;\n\t  }\n\t  else if (document.getSelection) {\n\t    // Opera? Netscape 4?\n\t    if (document.getSelection())\n\t      return;\n\t  }\n\t  else {\n\t    // IE\n\t    if ( document.selection.createRange().text )\n\t      return;\n\t  }\n\t\n\n\t  refocus();\n\t}\n\t\n\n\tfunction inputKeydown(e) {\n\t  // Use onkeydown because IE doesn't support onkeypress for arrow keys\n\t\n\n\t  //alert(e.keyCode + \" ^ \" + e.keycode);\n\t\n\n\t  if (e.shiftKey && e.keyCode == 13) { // shift-enter\n\t    // don't do anything; allow the shift-enter to insert a line break as normal\n\t  } else if (e.keyCode == 13) { // enter\n\t    // execute the input on enter\n\t\t\n\t    try { go(); } catch(er) { alert(er); };\n\t    setTimeout(function() { _in.value = \"\"; }, 0); // can't preventDefault on input, so clear it later\n\t  } else if (e.keyCode == 38) { // up\n\t    // go up in history if at top or ctrl-up\n\t    if (e.ctrlKey || caretInFirstLine(_in))\n\t      hist(true);\n\t  } else if (e.keyCode == 40) { // down\n\t    // go down in history if at end or ctrl-down\n\t    if (e.ctrlKey || caretInLastLine(_in))\n\t      hist(false);\n\t  } else if (e.keyCode == 9 ||e.keyCode == 18) { // tab\n\t    tabcomplete();\n\t    setTimeout(function() { refocus(); }, 0); // refocus because tab was hit\n\t  } else { }\n\t\n\n\t  setTimeout(recalculateInputHeight, 0);\n\t\n\n\t  //return true;\n\t};\n\t\n\n\tfunction caretInFirstLine(textbox)\n\t{\n\t  // IE doesn't support selectionStart/selectionEnd\n\t  if (textbox.selectionStart == undefined)\n\t    return true;\n\t\n\n\t  var firstLineBreak = textbox.value.indexOf(\"\\n\");\n\t\n\n\t  return ((firstLineBreak == -1) || (textbox.selectionStart <= firstLineBreak));\n\t}\n\t\n\n\tfunction caretInLastLine(textbox)\n\t{\n\t  // IE doesn't support selectionStart/selectionEnd\n\t  if (textbox.selectionEnd == undefined)\n\t    return true;\n\t\n\n\t  var lastLineBreak = textbox.value.lastIndexOf(\"\\n\");\n\t\n\n\t  return (textbox.selectionEnd > lastLineBreak);\n\t}\n\t\n\n\tfunction recalculateInputHeight()\n\t{\n\t  var rows = _in.value.split(/\\n/).length\n\t    + 1 // prevent scrollbar flickering in Mozilla\n\t    + (window.opera ? 1 : 0); // leave room for scrollbar in Opera\n\t\n\n\t  if (_in.rows != rows) // without this check, it is impossible to select text in Opera 7.60 or Opera 8.0.\n\t    _in.rows = rows;\n\t}\n\t\n\n\tfunction println(s, type)\n\t{\n\t  if((s=String(s)))\n\t  {\n\t\tconsole.log(\"OEXE SHELL: \" + s);\n\t    var newdiv = document.createElement(\"div\");\n\t    newdiv.appendChild(document.createTextNode(s));\n\t    newdiv.className = type;\n\t    _out.appendChild(newdiv);\n\t    return newdiv;\n\t  }\n\t}\n\t\n\n\tfunction printWithRunin(h, s, type)\n\t{\n\t  var div = println(s, type);\n\t  var head = document.createElement(\"strong\");\n\t  head.appendChild(document.createTextNode(h + \": \"));\n\t  div.insertBefore(head, div.firstChild);\n\t}\n\t\n\n\t\n\n\tvar shellCommands =\n\t{\n\tload : function load(url)\n\t{\n\t  var s = _win.document.createElement(\"script\");\n\t  s.type = \"text/javascript\";\n\t  s.src = url;\n\t  _win.document.getElementsByTagName(\"head\")[0].appendChild(s);\n\t  println(\"Loading \" + url + \"...\", \"message\");\n\t},\n\t\n\n\tclear : function clear()\n\t{\ndocument.getElementById(\"output\").innerHTML = '';\n\t},\n\t\n\n\tprint : function print(s) { println(s, \"print\"); },\n\t\n\n\t// the normal function, \"print\", shouldn't return a value\n\t// (suggested by brendan; later noticed it was a problem when showing others)\n\tpr : function pr(s)\n\t{\n\t  shellCommands.print(s); // need to specify shellCommands so it doesn't try window.print()!\n\t  return s;\n\t},\n\t\n\n\tprops : function props(e, onePerLine)\n\t{\n\t  if (e === null) {\n\t    println(\"props called with null argument\", \"error\");\n\t    return;\n\t  }\n\t\n\n\t  if (e === undefined) {\n\t    println(\"props called with undefined argument\", \"error\");\n\t    return;\n\t  }\n\t\n\n\t  var ns = [\"Methods\", \"Fields\", \"Unreachables\"];\n\t  var as = [[], [], []]; // array of (empty) arrays of arrays!\n\t  var p, j, i; // loop variables, several used multiple times\n\t\n\n\t  var protoLevels = 0;\n\t\n\n\t  for (p = e; p; p = p.__proto__)\n\t  {\n\t    for (i=0; i<ns.length; ++i)\n\t      as[i][protoLevels] = [];\n\t    ++protoLevels;\n\t  }\n\t\n\n\t  for(var a in e)\n\t  {\n\t    // Shortcoming: doesn't check that VALUES are the same in object and prototype.\n\t\n\n\t    var protoLevel = -1;\n\t    try\n\t    {\n\t      for (p = e; p && (a in p); p = p.__proto__)\n\t        ++protoLevel;\n\t    }\n\t    catch(er) { protoLevel = 0; } // \"in\" operator throws when param to props() is a string\n\t\n\n\t    var type = 1;\n\t    try\n\t    {\n\t      if ((typeof e[a]) == \"function\")\n\t        type = 0;\n\t    }\n\t    catch (er) { type = 2; }\n\t\n\n\t    as[type][protoLevel].push(a);\n\t  }\n\t\n\n\t  function times(s, n) { return n ? s + times(s, n-1) : \"\"; }\n\t\n\n\t  for (j=0; j<protoLevels; ++j)\n\t    for (i=0;i<ns.length;++i)\n\t      if (as[i][j].length)\n\t        printWithRunin(\n\t          ns[i] + times(\" of prototype\", j),\n\t          (onePerLine ? \"\\n\\n\" : \"\") + as[i][j].sort().join(onePerLine ? \"\\n\" : \", \") + (onePerLine ? \"\\n\\n\" : \"\"),\n\t          \"propList\"\n\t        );\n\t},\n\t\n\n\tblink : function blink(node)\n\t{\n\t  if (!node)                     throw(\"blink: argument is null or undefined.\");\n\t  if (node.nodeType == null)     throw(\"blink: argument must be a node.\");\n\t  if (node.nodeType == 3)        throw(\"blink: argument must not be a text node\");\n\t  if (node.documentElement)      throw(\"blink: argument must not be the document object\");\n\t\n\n\t  function setOutline(o) {\n\t    return function() {\n\t      if (node.style.outline != node.style.bogusProperty) {\n\t        // browser supports outline (Firefox 1.1 and newer, CSS3, Opera 8).\n\t        node.style.outline = o;\n\t      }\n\t      else if (node.style.MozOutline != node.style.bogusProperty) {\n\t        // browser supports MozOutline (Firefox 1.0.x and older)\n\t        node.style.MozOutline = o;\n\t      }\n\t      else {\n\t        // browser only supports border (IE). border is a fallback because it moves things around.\n\t        node.style.border = o;\n\t      }\n\t    }\n\t  }\n\t\n\n\t  function focusIt(a) {\n\t    return function() {\n\t      a.focus();\n\t    }\n\t  }\n\t\n\n\t  if (node.ownerDocument) {\n\t    var windowToFocusNow = (node.ownerDocument.defaultView || node.ownerDocument.parentWindow); // Moz vs. IE\n\t    if (windowToFocusNow)\n\t      setTimeout(focusIt(windowToFocusNow.top), 0);\n\t  }\n\t\n\n\t  for(var i=1;i<7;++i)\n\t    setTimeout(setOutline((i%2)?'3px solid red':'none'), i*100);\n\t\n\n\t  setTimeout(focusIt(window), 800);\n\t  setTimeout(focusIt(_in), 810);\n\t},\n\t\n\n\tscope : function scope(sc)\n\t{\n\t  if (!sc) sc = {};\n\t  _scope = sc;\n\t  println(\"Scope is now \" + sc + \".  If a variable is not found in this scope, window will also be searched.  New variables will still go on window.\", \"message\");\n\t},\n\t\n\n\tmathHelp : function mathHelp()\n\t{\n\t  printWithRunin(\"Math constants\", \"E, LN2, LN10, LOG2E, LOG10E, PI, SQRT1_2, SQRT2\", \"propList\");\n\t  printWithRunin(\"Math methods\", \"abs, acos, asin, atan, atan2, ceil, cos, exp, floor, log, max, min, pow, random, round, sin, sqrt, tan\", \"propList\");\n\t},\n\t\n\n\tans : undefined\n\t};\n\t\n\n\t\n\n\tfunction hist(up)\n\t{\n\t  // histList[0] = first command entered, [1] = second, etc.\n\t  // type something, press up --> thing typed is now in \"limbo\"\n\t  // (last item in histList) and should be reachable by pressing\n\t  // down again.\n\t\n\n\t  var L = histList.length;\n\t\n\n\t  if (L == 1)\n\t    return;\n\t\n\n\t  if (up)\n\t  {\n\t    if (histPos == L-1)\n\t    {\n\t      // Save this entry in case the user hits the down key.\n\t      histList[histPos] = _in.value;\n\t    }\n\t\n\n\t    if (histPos > 0)\n\t    {\n\t      histPos--;\n\t      // Use a timeout to prevent up from moving cursor within new text\n\t      // Set to nothing first for the same reason\n\t      setTimeout(\n\t        function() {\n\t          _in.value = '';\n\t          _in.value = histList[histPos];\n\t          var caretPos = _in.value.length;\n\t          if (_in.setSelectionRange)\n\t            _in.setSelectionRange(caretPos, caretPos);\n\t        },\n\t        0\n\t      );\n\t    }\n\t  }\n\t  else // down\n\t  {\n\t    if (histPos < L-1)\n\t    {\n\t      histPos++;\n\t      _in.value = histList[histPos];\n\t    }\n\t    else if (histPos == L-1)\n\t    {\n\t      // Already on the current entry: clear but save\n\t      if (_in.value)\n\t      {\n\t        histList[histPos] = _in.value;\n\t        ++histPos;\n\t        _in.value = \"\";\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\n\tfunction tabcomplete()\n\t{\n\t  /*\n\t   * Working backwards from s[from], find the spot\n\t   * where this expression starts.  It will scan\n\t   * until it hits a mismatched ( or a space,\n\t   * but it skips over quoted strings.\n\t   * If stopAtDot is true, stop at a '.'\n\t   */\n\t  function findbeginning(s, from, stopAtDot)\n\t  {\n\t    /*\n\t     *  Complicated function.\n\t     *\n\t     *  Return true if s[i] == q BUT ONLY IF\n\t     *  s[i-1] is not a backslash.\n\t     */\n\t    function equalButNotEscaped(s,i,q)\n\t    {\n\t      if(s.charAt(i) != q) // not equal go no further\n\t        return false;\n\t\n\n\t      if(i==0) // beginning of string\n\t        return true;\n\t\n\n\t      if(s.charAt(i-1) == '\\\\') // escaped?\n\t        return false;\n\t\n\n\t      return true;\n\t    }\n\t\n\n\t    var nparens = 0;\n\t    var i;\n\t    for(i=from; i>=0; i--)\n\t    {\n\t      if(s.charAt(i) == ' ')\n\t        break;\n\t\n\n\t      if(stopAtDot && s.charAt(i) == '.')\n\t        break;\n\t\n\n\t      if(s.charAt(i) == ')')\n\t        nparens++;\n\t      else if(s.charAt(i) == '(')\n\t        nparens--;\n\t\n\n\t      if(nparens < 0)\n\t        break;\n\t\n\n\t      // skip quoted strings\n\t      if(s.charAt(i) == '\\'' || s.charAt(i) == '\\\"')\n\t      {\n\t        //dump(\"skipping quoted chars: \");\n\t        var quot = s.charAt(i);\n\t        i--;\n\t        while(i >= 0 && !equalButNotEscaped(s,i,quot)) {\n\t          //dump(s.charAt(i));\n\t          i--;\n\t        }\n\t        //dump(\"\\n\");\n\t      }\n\t    }\n\t    return i;\n\t  }\n\t\n\n\t  // XXX should be used more consistently (instead of using selectionStart/selectionEnd throughout code)\n\t  // XXX doesn't work in IE, even though it contains IE-specific code\n\t  function getcaretpos(inp)\n\t  {\n\t    if(inp.selectionEnd != null)\n\t      return inp.selectionEnd;\n\t\n\n\t    if(inp.createTextRange)\n\t    {\n\t      var docrange = _win.Shell.document.selection.createRange();\n\t      var inprange = inp.createTextRange();\n\t      if (inprange.setEndPoint)\n\t      {\n\t        inprange.setEndPoint('EndToStart', docrange);\n\t        return inprange.text.length;\n\t      }\n\t    }\n\t\n\n\t    return inp.value.length; // sucks, punt\n\t  }\n\t\n\n\t  function setselectionto(inp,pos)\n\t  {\n\t    if(inp.selectionStart) {\n\t      inp.selectionStart = inp.selectionEnd = pos;\n\t    }\n\t    else if(inp.createTextRange) {\n\t      var docrange = _win.Shell.document.selection.createRange();\n\t      var inprange = inp.createTextRange();\n\t      inprange.move('character',pos);\n\t      inprange.select();\n\t    }\n\t    else { // err...\n\t    /*\n\t      inp.select();\n\t      if(_win.Shell.document.getSelection())\n\t        _win.Shell.document.getSelection() = \"\";\n\t        */\n\t    }\n\t  }\n\t    // get position of cursor within the input box\n\t    var caret = getcaretpos(_in);\n\t\n\n\t    if(caret) {\n\t      //dump(\"----\\n\");\n\t      var dotpos, spacepos, complete, obj;\n\t      //dump(\"caret pos: \" + caret + \"\\n\");\n\t      // see if there's a dot before here\n\t      dotpos = findbeginning(_in.value, caret-1, true);\n\t      //dump(\"dot pos: \" + dotpos + \"\\n\");\n\t      if(dotpos == -1 || _in.value.charAt(dotpos) != '.') {\n\t        dotpos = caret;\n\t//dump(\"changed dot pos: \" + dotpos + \"\\n\");\n\t      }\n\t\n\n\t      // look backwards for a non-variable-name character\n\t      spacepos = findbeginning(_in.value, dotpos-1, false);\n\t      //dump(\"space pos: \" + spacepos + \"\\n\");\n\t      // get the object we're trying to complete on\n\t      if(spacepos == dotpos || spacepos+1 == dotpos || dotpos == caret)\n\t      {\n\t        // try completing function args\n\t        if(_in.value.charAt(dotpos) == '(' ||\n\t (_in.value.charAt(spacepos) == '(' && (spacepos+1) == dotpos))\n\t        {\n\t          var fn,fname;\n\t  var from = (_in.value.charAt(dotpos) == '(') ? dotpos : spacepos;\n\t          spacepos = findbeginning(_in.value, from-1, false);\n\t\n\n\t          fname = _in.value.substr(spacepos+1,from-(spacepos+1));\n\t  //dump(\"fname: \" + fname + \"\\n\");\n\t          try {\n\t            with(_win.Shell._scope)\n\t              with(_win)\n\t                with(Shell.shellCommands)\n\t                  fn = eval(fname);\n\t          }\n\t          catch(er) {\n\t            //dump('fn is not a valid object\\n');\n\t            return;\n\t          }\n\t          if(fn == undefined) {\n\t             //dump('fn is undefined');\n\t             return;\n\t          }\n\t          if(fn instanceof Function)\n\t          {\n\t            // Print function definition, including argument names, but not function body\n\t            if(!fn.toString().match(/function .+?\\(\\) +\\{\\n +\\[native code\\]\\n\\}/))\n\t              println(fn.toString().match(/function .+?\\(.*?\\)/), \"tabcomplete\");\n\t          }\n\t\n\n\t          return;\n\t        }\n\t        else\n\t          obj = _win;\n\t      }\n\t      else\n\t      {\n\t        var objname = _in.value.substr(spacepos+1,dotpos-(spacepos+1));\n\t        //dump(\"objname: |\" + objname + \"|\\n\");\n\t        try {\n\t          with(_win.Shell._scope)\n\t            with(_win)\n\t                obj = eval(objname);\n\t        }\n\t        catch(er) {\n\t          printError(er);\n\t          return;\n\t        }\n\t        if(obj == undefined) {\n\t          // sometimes this is tabcomplete's fault, so don't print it :(\n\t          // e.g. completing from \"print(document.getElements\"\n\t          // println(\"Can't complete from null or undefined expression \" + objname, \"error\");\n\t          return;\n\t        }\n\t      }\n\t      //dump(\"obj: \" + obj + \"\\n\");\n\t      // get the thing we're trying to complete\n\t      if(dotpos == caret)\n\t      {\n\t        if(spacepos+1 == dotpos || spacepos == dotpos)\n\t        {\n\t          // nothing to complete\n\t          //dump(\"nothing to complete\\n\");\n\t          return;\n\t        }\n\t\n\n\t        complete = _in.value.substr(spacepos+1,dotpos-(spacepos+1));\n\t      }\n\t      else {\n\t        complete = _in.value.substr(dotpos+1,caret-(dotpos+1));\n\t      }\n\t      //dump(\"complete: \" + complete + \"\\n\");\n\t      // ok, now look at all the props/methods of this obj\n\t      // and find ones starting with 'complete'\n\t      var matches = [];\n\t      var bestmatch = null;\n\t      for(var a in obj)\n\t      {\n\t        //a = a.toString();\n\t        //XXX: making it lowercase could help some cases,\n\t        // but screws up my general logic.\n\t        if(a.substr(0,complete.length) == complete) {\n\t          matches.push(a);\n\t          ////dump(\"match: \" + a + \"\\n\");\n\t          // if no best match, this is the best match\n\t          if(bestmatch == null)\n\t          {\n\t            bestmatch = a;\n\t          }\n\t          else {\n\t            // the best match is the longest common string\n\t            function min(a,b){ return ((a<b)?a:b); }\n\t            var i;\n\t            for(i=0; i< min(bestmatch.length, a.length); i++)\n\t            {\n\t              if(bestmatch.charAt(i) != a.charAt(i))\n\t                break;\n\t            }\n\t            bestmatch = bestmatch.substr(0,i);\n\t            ////dump(\"bestmatch len: \" + i + \"\\n\");\n\t          }\n\t          ////dump(\"bestmatch: \" + bestmatch + \"\\n\");\n\t        }\n\t      }\n\t      bestmatch = (bestmatch || \"\");\n\t      ////dump(\"matches: \" + matches + \"\\n\");\n\t      var objAndComplete = (objname || obj) + \".\" + bestmatch;\n\t      //dump(\"matches.length: \" + matches.length + \", tooManyMatches: \" + tooManyMatches + \", objAndComplete: \" + objAndComplete + \"\\n\");\n\t      if(matches.length > 1 && (tooManyMatches == objAndComplete || matches.length <= 10)) {\n\t\n\n\t        printWithRunin(\"Matches: \", matches.join(', '), \"tabcomplete\");\n\t        tooManyMatches = null;\n\t      }\n\t      else if(matches.length > 10)\n\t      {\n\t        println(matches.length + \" matches.  Press tab again to see them all\", \"tabcomplete\");\n\t        tooManyMatches = objAndComplete;\n\t      }\n\t      else {\n\t        tooManyMatches = null;\n\t      }\n\t      if(bestmatch != \"\")\n\t      {\n\t        var sstart;\n\t        if(dotpos == caret) {\n\t          sstart = spacepos+1;\n\t        }\n\t        else {\n\t          sstart = dotpos+1;\n\t        }\n\t        _in.value = _in.value.substr(0, sstart)\n\t                  + bestmatch\n\t                  + _in.value.substr(caret);\n\t        setselectionto(_in,caret + (bestmatch.length - complete.length));\n\t      }\n\t    }\n\t}\n\t\n\n\tfunction printQuestion(q)\n\t{\n\t  println(q, \"input\");\n\t}\n\t\n\n\tfunction printAnswer(a)\n\t{\n\t  if (a !== undefined) {\n\t    println(a, \"normalOutput\");\n\t    shellCommands.ans = a;\n\t  }\n\t}\n\t\n\n\tfunction printError(er)\n\t{\n\t  var lineNumberString;\n\t\n\n\t  lastError = er; // for debugging the shell\n\t  if (er.name)\n\t  {\n\t    // lineNumberString should not be \"\", to avoid a very wacky bug in IE 6.\n\t    lineNumberString = (er.lineNumber != undefined) ? (\" on line \" + er.lineNumber + \": \") : \": \";\n\t    println(er.name + lineNumberString + er.message, \"error\"); // Because IE doesn't have error.toString.\n\t  }\n\t  else\n\t    println(er, \"error\"); // Because security errors in Moz /only/ have toString.\n\t}\n\t\n\n\tfunction go(s)\n\t{\n\t  _in.value = question = s ? s : _in.value;\n\t\n\n\t  if (question == \"\")\n\t    return;\n\t\n\n\t  histList[histList.length-1] = question;\n\t  histList[histList.length] = \"\";\n\t  histPos = histList.length - 1;\n\t\n\n\t  // Unfortunately, this has to happen *before* the JavaScript is run, so that\n\t  // print() output will go in the right place.\n\t  _in.value='';\n\t  recalculateInputHeight();\n\t  printQuestion(question);\n\t\n\n\t  if (_win.closed) {\n\t    printError(\"Target window has been closed.\");\n\t    return;\n\t  }\n\t\n\n\t  try { (\"Shell\" in _win) }\n\t  catch(er) {\n\t    printError(\"The JavaScript Shell cannot access variables in the target window.  The most likely reason is that the target window now has a different page loaded and that page has a different hostname than the original page.\");\n\t    return;\n\t  }\n\t\n\n\t  if (!(\"Shell\" in _win))\n\t    initTarget(); // silent\n\t\n\n\t  // Evaluate Shell.question using _win's eval (this is why eval isn't in the |with|, IIRC).\n\t  _win.location.href = \"javascript:try{ Shell.printAnswer(eval('with(Shell._scope) with(Shell.shellCommands) {' + Shell.question + String.fromCharCode(10) + '}')); } catch(er) { Shell.printError(er); }; setTimeout(Shell.refocus, 0); void 0\";\n\t}\n\t\n\n\t","id":"","type":"text/javascript","encr":"none","src":""}],"body":"<h1>OEXE CLIENT</h1>\n<p>\n    upload an html file to to parse or upload a OEXE file to run\n</p>\n\n<div id=\"Upload\">\n<input id=\"fileInput\" type=\"file\" name=\"file\">\n<input name=\"exeU\" id=\"exeURL\" placeholder=\"OEXE URL\" style=\"position:absolute;bottom: 0; left: 50%; transform: translate(-50%,0);margin-bottom: 15px;\" type=\"text\">\n\n</div>\n<br>\n<button class=\"btn\" onclick=\"Execute();\">EXECUTE OEXE</button>\n<br><button class=\"btn\" onclick=\"ExecuteURL(document.getElementById('exeURL').value);\">EXECUTE OEXE FROM URL</button>\n<br>\n<button class=\"btn\" onclick=\"if (StoreLoaded){OpenStore()}else {alert('OEXE store not loaded') }\">OEXE STORE</button>\n<h2>DEV TOOLS</h2>\n<button onclick=\"Compile(fd);\" class=\"btn\">Compile OEXE</button>\n<br>\n<button onclick=\"IBC()\" class=\"btn\">Import brodcastchannel</button>\n<br>\n<button onclick=\"PostBC(prompt('script'))\" class=\"btn\">send to BC</button>\n\n\n\n\n\n\n<br>\n<br>\n\n<h3 class=\"bit\" style=\"color:lime;font-size:x-large;\">OASIS OEXE SHELL</h3>\n<div class=\"bit\" id=\"output\"></div>\n\t\n\n<div class=\"bit\"><textarea id=\"input\" class=\"input\" wrap=\"off\" onkeydown=\"inputKeydown(event)\" rows=\"1\"></textarea></div>\n\t\n\n\n\n\n\n\n\n\n\n<button onclick=\"openPKG()\" id=\"SM\">Script manager</button>\n\n\n\n\n<style>\n\n#SM {\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tpadding: 10px;\n\tborder-radius: 10px;\n\tbackground-color: #555;\n\tcolor: white;\n}\n#SM:hover {\nbackground-color: #333;\n}\n\n\tbody {\n\t  font-family: 'Lato', sans-serif;\n\t}\n\t\n\t.overlay {\n\t  height: 0%;\n\t  width: 100%;\n\t  position: fixed;\n\t  z-index: 1;\n\t  bottom: 0;\n\t  left: 0;\n\t  background-color: rgb(0,0,0);\n\t  background-color: rgba(0,0,0, 0.9);\n\t  overflow-y: hidden;\n\t  transition: 0.5s;\n\t}\n\t\n\t.overlay-content {\n\t  position: relative;\n\t  top: 5%;\n\t  width: 100%;\n\t  text-align: center;\n\t}\n\t\n\t.overlay a {\n\t  padding: 8px;\n\t  text-decoration: none;\n\t  font-size: 36px;\n\t  color: #818181;\n\t  display: block;\n\t  transition: 0.3s;\n\t}\n\t\n\t.overlay a:hover, .overlay a:focus {\n\t  color: #f1f1f1;\n\t}\n\t\n\t.overlay .closebtn {\n\t  position: absolute;\n\t  top: 20px;\n\t  right: 45px;\n\t  font-size: 60px;\n\t}\n\t\n\t@media screen and (max-height: 450px) {\n\t  .overlay {overflow-y: auto;}\n\t  .overlay a {font-size: 20px}\n\t  .overlay .closebtn {\n\t  font-size: 40px;\n\t  top: 15px;\n\t  right: 35px;\n\t  }\n\t}\n\n\t.Loaded {\n\t\tpadding: 10px;\n\t\tborder-radius: 10px;\n\t}\n\t.Yes {\n\t\tbackground-color: lime;\n\t}\n\t.No {\n\t\tbackground-color: red;\n\t}\n\t</style>\n\t\n\t\n\t<div id=\"ScriptManager\" class=\"overlay\">\n\t  <a href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closePKG()\">Ã—</a>\n\t  <div class=\"overlay-content\">\n<h1>Script manager</h1>\n<p id=\"C_INDEX\"></p>\n<p id=\"S_INDEX\"></p>  <button onclick=\"localStorage.setItem('OEXE_index','0'); DisplayScripts()\">Reset index</button>\n<button onclick=\"GetLatestIndex()\">Get Current index</button>\n<br>\n<button onclick=\"GetStoreIndex()\">Get Current Store index</button>\n<button onclick=\"localStorage.setItem('OEXE_store_index','0'); DisplayScripts()\">Reset store index</button>\n<div id=\"myScripts\"></div>\n\t  </div>\n\t</div>\n\t\n\t\n\t\n\t\n\t \n\t\n\n\n\n\t\n\n\n<style>\n\n\n.btn {\npadding: 10px;\nmin-width: 300px;\nborder-radius: 10px;\nbackground-color: #555;\ncolor: white;\nmargin-top: 10px;\n}\n.btn:hover {\nbackground-color: #333;\n}\n\n#fileInput {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%,-60%);\n    margin-left: 30px;\n}\n\n#Upload {\n    background-color: #333;\n    width: 50vw;\n    height: 23vh;\n    position: relative;\n    left: 50%;\n    transform: translate(-50%);\n    border-radius: 10px;\n}\n    body {\n        background-color: black;\n        color: white;\n        font-family: sans;\n        text-align: center;\n    }\n</style>\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t<!-- for http://ted.mielczarek.org/code/mozilla/extensiondev/ -->\n\n\t<style type=\"text/css\">\n\n\t    \n\t    #output { white-space: pre; white-space: -moz-pre-wrap; height: 45vh; background-color: rgb(37, 37, 37); overflow: auto;} /* Preserve line breaks, but wrap too if browser supports it */\n\t    h3 { margin-top: 0; margin-bottom: 0em; }\n\t    h3 + div { margin: 0; }\n\t    \n\t    form { margin: 0; padding: 0; }\n\t    #input { width: 100%; border: none; padding: 0; overflow: auto; border-style: solid; border-width: 1px; height: 250px; background: black; border-color: green;}\n\t    #input:focus {\n\t      outline: none;\n\t      border-color: rgba(0, 255, 0, 0.589);\n\t    }\n\t    .input { color: lime;  font: inherit; font-weight: bold; margin-top: .5em; /* background: #E6E6FF; */ }\n\t    .normalOutput {margin-top: 5px; color: lime;  }\n\t    .print {margin-top: 10px; color: rgb(0, 155, 0);  }\n\t    .error { color: red;  margin-top: 5px;}\n\t    .propList { color: green; margin-top: 5px; }\n\t    .message { color: cyan;  margin-top: 5px;}\n\t    .tabcomplete { color: purple;  margin-top: 5px;}\n\t    \n\t    \n\t    .bit {\n\t        font-size: large;\n\t        font-family: '8bit';\n\t    }\n\t    \n\n\t    \n\t    body {\n\t\t\tfont-family: sans-serif;\n\t\t}\n\t    \n\n\t    @font-face {\n\t      font-family: '8bit';\n\t      src: url('https://cdn.jsdelivr.net/gh/jackb0back/OEXE_COMPILER_@main/DiaryOfAn8BitMage-lYDD.ttf');\n\t    }\n\n\t    </style>\n\n","head":"","BID":"","body_items":{"onLoad":"","style":""}}`,true)